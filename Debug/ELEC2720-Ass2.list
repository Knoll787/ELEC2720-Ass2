
ELEC2720-Ass2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007100  08007100  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007108  08007108  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800710c  0800710c  0001710c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  20000090  080071a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  080071a0  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017958  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ab  00000000  00000000  00037a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0003adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  0003bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023046  00000000  00000000  0003cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139b1  00000000  00000000  0005fb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9924  00000000  00000000  000734bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cde3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004088  00000000  00000000  0013ce38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070cc 	.word	0x080070cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080070cc 	.word	0x080070cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc17 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f8af 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f97b 	bl	80007c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f915 	bl	8000700 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d6:	f000 f941 	bl	800075c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004da:	f006 f9e5 	bl	80068a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  int debounce_counter = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  enum debounceState {LOCKED, RELEASED};
  enum debounceState debounce_state = RELEASED;
 80004e2:	2301      	movs	r3, #1
 80004e4:	72fb      	strb	r3, [r7, #11]
  int JoyState = 1;
 80004e6:	2301      	movs	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0); // Left LED
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f0:	484a      	ldr	r0, [pc, #296]	; (800061c <main+0x15c>)
 80004f2:	f000 ff5d 	bl	80013b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0); // Right LED
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fc:	4847      	ldr	r0, [pc, #284]	; (800061c <main+0x15c>)
 80004fe:	f000 ff57 	bl	80013b0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000502:	f006 f9f7 	bl	80068f4 <MX_USB_HOST_Process>

    switch(debounce_state) {
 8000506:	7afb      	ldrb	r3, [r7, #11]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00e      	beq.n	800052a <main+0x6a>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d11b      	bne.n	8000548 <main+0x88>
    	case RELEASED:
    	// Read JOY_C only when RELEASED
			JoyState = HAL_GPIO_ReadPin (JOY_C_GPIO_Port, JOY_C_Pin);
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	4842      	ldr	r0, [pc, #264]	; (8000620 <main+0x160>)
 8000516:	f000 ff33 	bl	8001380 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	607b      	str	r3, [r7, #4]
			if (JoyState == 0) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d110      	bne.n	8000546 <main+0x86>
				debounce_state = LOCKED;
 8000524:	2300      	movs	r3, #0
 8000526:	72fb      	strb	r3, [r7, #11]
			}
		break;
 8000528:	e00d      	b.n	8000546 <main+0x86>

    case LOCKED:
		JoyState = 1; // Manually reset JoyState when LOCKED
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
		if ( debounce_counter > DEBOUNCE_INTERVAL) {
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b14      	cmp	r3, #20
 8000532:	dd04      	ble.n	800053e <main+0x7e>
			debounce_state = RELEASED; // RELEASE after time-out
 8000534:	2301      	movs	r3, #1
 8000536:	72fb      	strb	r3, [r7, #11]
			debounce_counter = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
		}
		else {
			++debounce_counter; // still LOCKED, increase counter
		}
		break;
 800053c:	e004      	b.n	8000548 <main+0x88>
			++debounce_counter; // still LOCKED, increase counter
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
		break;
 8000544:	e000      	b.n	8000548 <main+0x88>
		break;
 8000546:	bf00      	nop
    }

    if (HAL_GPIO_ReadPin(JOY_CTR_GPIO_Port, JOY_CTR_Pin) == 0) { // Joy Stick: Centre
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	4836      	ldr	r0, [pc, #216]	; (8000624 <main+0x164>)
 800054c:	f000 ff18 	bl	8001380 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10c      	bne.n	8000570 <main+0xb0>
         HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055c:	482f      	ldr	r0, [pc, #188]	; (800061c <main+0x15c>)
 800055e:	f000 ff27 	bl	80013b0 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000568:	482c      	ldr	r0, [pc, #176]	; (800061c <main+0x15c>)
 800056a:	f000 ff21 	bl	80013b0 <HAL_GPIO_WritePin>
 800056e:	e051      	b.n	8000614 <main+0x154>
       }
   	else if (HAL_GPIO_ReadPin(JOY_A_GPIO_Port, JOY_A_Pin) == 0) { // Joy Stick: Left
 8000570:	2110      	movs	r1, #16
 8000572:	482d      	ldr	r0, [pc, #180]	; (8000628 <main+0x168>)
 8000574:	f000 ff04 	bl	8001380 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d10c      	bne.n	8000598 <main+0xd8>
         HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	4825      	ldr	r0, [pc, #148]	; (800061c <main+0x15c>)
 8000586:	f000 ff13 	bl	80013b0 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	4822      	ldr	r0, [pc, #136]	; (800061c <main+0x15c>)
 8000592:	f000 ff0d 	bl	80013b0 <HAL_GPIO_WritePin>
 8000596:	e03d      	b.n	8000614 <main+0x154>
       }
   	else if (HAL_GPIO_ReadPin(JOY_D_GPIO_Port, JOY_D_Pin) == 0) { // Joy Stick: Right
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	4822      	ldr	r0, [pc, #136]	; (8000624 <main+0x164>)
 800059c:	f000 fef0 	bl	8001380 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10c      	bne.n	80005c0 <main+0x100>
         HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	481b      	ldr	r0, [pc, #108]	; (800061c <main+0x15c>)
 80005ae:	f000 feff 	bl	80013b0 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0x15c>)
 80005ba:	f000 fef9 	bl	80013b0 <HAL_GPIO_WritePin>
 80005be:	e029      	b.n	8000614 <main+0x154>
   	}
   	else if (JoyState == 0) { // Joy Stick: Down
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d126      	bne.n	8000614 <main+0x154>
         if (HAL_GPIO_ReadPin(LD4_GPIO_Port, LD4_Pin) == 0 && HAL_GPIO_ReadPin(LD5_GPIO_Port, LD5_Pin) == 0) {
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <main+0x15c>)
 80005cc:	f000 fed8 	bl	8001380 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d114      	bne.n	8000600 <main+0x140>
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	4810      	ldr	r0, [pc, #64]	; (800061c <main+0x15c>)
 80005dc:	f000 fed0 	bl	8001380 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d10c      	bne.n	8000600 <main+0x140>
           HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0x15c>)
 80005ee:	f000 fedf 	bl	80013b0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x15c>)
 80005fa:	f000 fed9 	bl	80013b0 <HAL_GPIO_WritePin>
 80005fe:	e009      	b.n	8000614 <main+0x154>
         }
         else {
           HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <main+0x15c>)
 8000606:	f000 feec 	bl	80013e2 <HAL_GPIO_TogglePin>
           HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x15c>)
 8000610:	f000 fee7 	bl	80013e2 <HAL_GPIO_TogglePin>
         }
     }
    HAL_Delay(10);
 8000614:	200a      	movs	r0, #10
 8000616:	f000 fbe1 	bl	8000ddc <HAL_Delay>
    MX_USB_HOST_Process();
 800061a:	e772      	b.n	8000502 <main+0x42>
 800061c:	40020c00 	.word	0x40020c00
 8000620:	40020400 	.word	0x40020400
 8000624:	40020800 	.word	0x40020800
 8000628:	40020000 	.word	0x40020000

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fc76 	bl	8006f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fd64 	bl	8003180 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 f9b7 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2105      	movs	r1, #5
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 ffc5 	bl	8003670 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 f9a0 	bl	8000a30 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f002 fbdb 	bl	8002ef8 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f972 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000bc 	.word	0x200000bc
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MX_SPI1_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007ae:	f003 f947 	bl	8003a40 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f93a 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000110 	.word	0x20000110
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b8d      	ldr	r3, [pc, #564]	; (8000a18 <MX_GPIO_Init+0x250>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a8c      	ldr	r2, [pc, #560]	; (8000a18 <MX_GPIO_Init+0x250>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <MX_GPIO_Init+0x250>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b86      	ldr	r3, [pc, #536]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a85      	ldr	r2, [pc, #532]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <MX_GPIO_Init+0x250>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b7f      	ldr	r3, [pc, #508]	; (8000a18 <MX_GPIO_Init+0x250>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a7e      	ldr	r2, [pc, #504]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b78      	ldr	r3, [pc, #480]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a77      	ldr	r2, [pc, #476]	; (8000a18 <MX_GPIO_Init+0x250>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b75      	ldr	r3, [pc, #468]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b71      	ldr	r3, [pc, #452]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a70      	ldr	r2, [pc, #448]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b6e      	ldr	r3, [pc, #440]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b6a      	ldr	r3, [pc, #424]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a69      	ldr	r2, [pc, #420]	; (8000a18 <MX_GPIO_Init+0x250>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b67      	ldr	r3, [pc, #412]	; (8000a18 <MX_GPIO_Init+0x250>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2108      	movs	r1, #8
 800088a:	4864      	ldr	r0, [pc, #400]	; (8000a1c <MX_GPIO_Init+0x254>)
 800088c:	f000 fd90 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	4862      	ldr	r0, [pc, #392]	; (8000a20 <MX_GPIO_Init+0x258>)
 8000896:	f000 fd8b 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089a:	2200      	movs	r2, #0
 800089c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a0:	4860      	ldr	r0, [pc, #384]	; (8000a24 <MX_GPIO_Init+0x25c>)
 80008a2:	f000 fd85 	bl	80013b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4857      	ldr	r0, [pc, #348]	; (8000a1c <MX_GPIO_Init+0x254>)
 80008be:	f000 fbc3 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4851      	ldr	r0, [pc, #324]	; (8000a20 <MX_GPIO_Init+0x258>)
 80008da:	f000 fbb5 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4849      	ldr	r0, [pc, #292]	; (8000a20 <MX_GPIO_Init+0x258>)
 80008fa:	f000 fba5 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000902:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4845      	ldr	r0, [pc, #276]	; (8000a28 <MX_GPIO_Init+0x260>)
 8000914:	f000 fb98 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_A_Pin */
  GPIO_InitStruct.Pin = JOY_A_Pin;
 8000918:	2310      	movs	r3, #16
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_A_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	483f      	ldr	r0, [pc, #252]	; (8000a28 <MX_GPIO_Init+0x260>)
 800092c:	f000 fb8c 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB12 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_12;
 8000930:	f241 0304 	movw	r3, #4100	; 0x1004
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4839      	ldr	r0, [pc, #228]	; (8000a2c <MX_GPIO_Init+0x264>)
 8000946:	f000 fb7f 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095c:	2305      	movs	r3, #5
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4831      	ldr	r0, [pc, #196]	; (8000a2c <MX_GPIO_Init+0x264>)
 8000968:	f000 fb6e 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 JOY_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|JOY_C_Pin;
 800096c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000976:	2301      	movs	r3, #1
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	482a      	ldr	r0, [pc, #168]	; (8000a2c <MX_GPIO_Init+0x264>)
 8000982:	f000 fb61 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000986:	f24f 0310 	movw	r3, #61456	; 0xf010
 800098a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4821      	ldr	r0, [pc, #132]	; (8000a24 <MX_GPIO_Init+0x25c>)
 80009a0:	f000 fb52 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_D_Pin JOY_CTR_Pin */
  GPIO_InitStruct.Pin = JOY_D_Pin|JOY_CTR_Pin;
 80009a4:	23c0      	movs	r3, #192	; 0xc0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481a      	ldr	r0, [pc, #104]	; (8000a20 <MX_GPIO_Init+0x258>)
 80009b8:	f000 fb46 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 80009bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ce:	2306      	movs	r3, #6
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_GPIO_Init+0x258>)
 80009da:	f000 fb35 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_GPIO_Init+0x25c>)
 80009f2:	f000 fb29 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0x254>)
 8000a0c:	f000 fb1c 	bl	8001048 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3730      	adds	r7, #48	; 0x30
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f000 faa2 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_I2C_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12c      	bne.n	8000b08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000adc:	2304      	movs	r3, #4
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <HAL_I2C_MspInit+0x8c>)
 8000ae8:	f000 faae 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020400 	.word	0x40020400

08000b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_SPI_MspInit+0x84>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12b      	bne.n	8000b96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b76:	23e0      	movs	r3, #224	; 0xe0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_SPI_MspInit+0x8c>)
 8000b92:	f000 fa59 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40013000 	.word	0x40013000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8d0 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <OTG_FS_IRQHandler+0x10>)
 8000c06:	f000 fe71 	bl	80018ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000544 	.word	0x20000544

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f006 f938 	bl	8006eb8 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200000ac 	.word	0x200000ac
 8000c7c:	20000858 	.word	0x20000858

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f006 f8f7 	bl	8006ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fbf3 	bl	80004c0 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ce8:	08007110 	.word	0x08007110
  ldr r2, =_sbss
 8000cec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cf0:	20000858 	.word	0x20000858

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f94f 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe86 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f967 	bl	800102e <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f92f 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000168 	.word	0x20000168

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000168 	.word	0x20000168

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e16b      	b.n	800133c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 815a 	bne.w	8001336 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80b4 	beq.w	8001336 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5f      	ldr	r2, [pc, #380]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a5b      	ldr	r2, [pc, #364]	; (8001358 <HAL_GPIO_Init+0x310>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <HAL_GPIO_Init+0x314>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02b      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a51      	ldr	r2, [pc, #324]	; (8001360 <HAL_GPIO_Init+0x318>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <HAL_GPIO_Init+0x31c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_GPIO_Init+0x320>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_GPIO_Init+0x324>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4d      	ldr	r2, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x328>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x32c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x330>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x20a>
 800124e:	2307      	movs	r3, #7
 8001250:	e00e      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001252:	2308      	movs	r3, #8
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001256:	2306      	movs	r3, #6
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x310>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_GPIO_Init+0x334>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_GPIO_Init+0x334>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_GPIO_Init+0x334>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_GPIO_Init+0x334>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_GPIO_Init+0x334>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_GPIO_Init+0x334>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_GPIO_Init+0x334>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_GPIO_Init+0x334>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae90 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40021c00 	.word	0x40021c00
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	041a      	lsls	r2, r3, #16
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43d9      	mvns	r1, r3
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	400b      	ands	r3, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001418:	b08f      	sub	sp, #60	; 0x3c
 800141a:	af0a      	add	r7, sp, #40	; 0x28
 800141c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e054      	b.n	80014d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f005 fa8e 	bl	8006964 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fbe5 	bl	8003c36 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	687e      	ldr	r6, [r7, #4]
 8001474:	466d      	mov	r5, sp
 8001476:	f106 0410 	add.w	r4, r6, #16
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001486:	e885 0003 	stmia.w	r5, {r0, r1}
 800148a:	1d33      	adds	r3, r6, #4
 800148c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148e:	6838      	ldr	r0, [r7, #0]
 8001490:	f002 fb5f 	bl	8003b52 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fbdc 	bl	8003c58 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	687e      	ldr	r6, [r7, #4]
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 0410 	add.w	r4, r6, #16
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	1d33      	adds	r3, r6, #4
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f002 fd42 	bl	8003f4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014da:	b590      	push	{r4, r7, lr}
 80014dc:	b089      	sub	sp, #36	; 0x24
 80014de:	af04      	add	r7, sp, #16
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	4608      	mov	r0, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	461a      	mov	r2, r3
 80014e8:	4603      	mov	r3, r0
 80014ea:	70fb      	strb	r3, [r7, #3]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70bb      	strb	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_HCD_HC_Init+0x28>
 80014fe:	2302      	movs	r3, #2
 8001500:	e076      	b.n	80015f0 <HAL_HCD_HC_Init+0x116>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	333d      	adds	r3, #61	; 0x3d
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3338      	adds	r3, #56	; 0x38
 800152a:	787a      	ldrb	r2, [r7, #1]
 800152c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3340      	adds	r3, #64	; 0x40
 800153c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800153e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3339      	adds	r3, #57	; 0x39
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	333f      	adds	r3, #63	; 0x3f
 8001560:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001564:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	78ba      	ldrb	r2, [r7, #2]
 800156a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156e:	b2d0      	uxtb	r0, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	212c      	movs	r1, #44	; 0x2c
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	4413      	add	r3, r2
 800157a:	333a      	adds	r3, #58	; 0x3a
 800157c:	4602      	mov	r2, r0
 800157e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001584:	2b00      	cmp	r3, #0
 8001586:	da09      	bge.n	800159c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	212c      	movs	r1, #44	; 0x2c
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	333b      	adds	r3, #59	; 0x3b
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e008      	b.n	80015ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	212c      	movs	r1, #44	; 0x2c
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	333b      	adds	r3, #59	; 0x3b
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	333c      	adds	r3, #60	; 0x3c
 80015bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	787c      	ldrb	r4, [r7, #1]
 80015c8:	78ba      	ldrb	r2, [r7, #2]
 80015ca:	78f9      	ldrb	r1, [r7, #3]
 80015cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4623      	mov	r3, r4
 80015de:	f002 fe2f 	bl	8004240 <USB_HC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_HCD_HC_Halt+0x1e>
 8001612:	2302      	movs	r3, #2
 8001614:	e00f      	b.n	8001636 <HAL_HCD_HC_Halt+0x3e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f003 f86b 	bl	8004702 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	70fb      	strb	r3, [r7, #3]
 8001652:	460b      	mov	r3, r1
 8001654:	70bb      	strb	r3, [r7, #2]
 8001656:	4613      	mov	r3, r2
 8001658:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	212c      	movs	r1, #44	; 0x2c
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	333b      	adds	r3, #59	; 0x3b
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	212c      	movs	r1, #44	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	333f      	adds	r3, #63	; 0x3f
 800167a:	787a      	ldrb	r2, [r7, #1]
 800167c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800167e:	7c3b      	ldrb	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d112      	bne.n	80016aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3342      	adds	r3, #66	; 0x42
 8001692:	2203      	movs	r2, #3
 8001694:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	212c      	movs	r1, #44	; 0x2c
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	333d      	adds	r3, #61	; 0x3d
 80016a4:	7f3a      	ldrb	r2, [r7, #28]
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e008      	b.n	80016bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	3342      	adds	r3, #66	; 0x42
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	f200 80c6 	bhi.w	8001850 <HAL_HCD_HC_SubmitRequest+0x210>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	0800183d 	.word	0x0800183d
 80016d4:	08001741 	.word	0x08001741
 80016d8:	080017bf 	.word	0x080017bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016dc:	7c3b      	ldrb	r3, [r7, #16]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f040 80b8 	bne.w	8001854 <HAL_HCD_HC_SubmitRequest+0x214>
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80b4 	bne.w	8001854 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016ec:	8b3b      	ldrh	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	3355      	adds	r3, #85	; 0x55
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	212c      	movs	r1, #44	; 0x2c
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4413      	add	r3, r2
 8001710:	3355      	adds	r3, #85	; 0x55
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3342      	adds	r3, #66	; 0x42
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800172a:	e093      	b.n	8001854 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	212c      	movs	r1, #44	; 0x2c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	3342      	adds	r3, #66	; 0x42
 800173a:	2202      	movs	r2, #2
 800173c:	701a      	strb	r2, [r3, #0]
      break;
 800173e:	e089      	b.n	8001854 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d11d      	bne.n	8001782 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	3355      	adds	r3, #85	; 0x55
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800176c:	e073      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3342      	adds	r3, #66	; 0x42
 800177c:	2202      	movs	r2, #2
 800177e:	701a      	strb	r2, [r3, #0]
      break;
 8001780:	e069      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	212c      	movs	r1, #44	; 0x2c
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	4413      	add	r3, r2
 800178e:	3354      	adds	r3, #84	; 0x54
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3342      	adds	r3, #66	; 0x42
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
      break;
 80017a8:	e055      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3342      	adds	r3, #66	; 0x42
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
      break;
 80017bc:	e04b      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017be:	78bb      	ldrb	r3, [r7, #2]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d11d      	bne.n	8001800 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3355      	adds	r3, #85	; 0x55
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ea:	e034      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3342      	adds	r3, #66	; 0x42
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e02a      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3354      	adds	r3, #84	; 0x54
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3342      	adds	r3, #66	; 0x42
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e016      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3342      	adds	r3, #66	; 0x42
 8001836:	2202      	movs	r2, #2
 8001838:	701a      	strb	r2, [r3, #0]
      break;
 800183a:	e00c      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3342      	adds	r3, #66	; 0x42
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
      break;
 800184e:	e002      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001850:	bf00      	nop
 8001852:	e000      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001854:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3344      	adds	r3, #68	; 0x44
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	8b3a      	ldrh	r2, [r7, #24]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	202c      	movs	r0, #44	; 0x2c
 8001870:	fb00 f303 	mul.w	r3, r0, r3
 8001874:	440b      	add	r3, r1
 8001876:	334c      	adds	r3, #76	; 0x4c
 8001878:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3360      	adds	r3, #96	; 0x60
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3350      	adds	r3, #80	; 0x50
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3339      	adds	r3, #57	; 0x39
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3361      	adds	r3, #97	; 0x61
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	222c      	movs	r2, #44	; 0x2c
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	3338      	adds	r3, #56	; 0x38
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	18d1      	adds	r1, r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	f002 fdbe 	bl	800445c <USB_HC_StartXfer>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop

080018ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fae1 	bl	8003eca <USB_GetMode>
 8001908:	4603      	mov	r3, r0
 800190a:	2b01      	cmp	r3, #1
 800190c:	f040 80f6 	bne.w	8001afc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fac5 	bl	8003ea4 <USB_ReadInterrupts>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80ec 	beq.w	8001afa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fabc 	bl	8003ea4 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001936:	d104      	bne.n	8001942 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001940:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 faac 	bl	8003ea4 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001956:	d104      	bne.n	8001962 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001960:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fa9c 	bl	8003ea4 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001976:	d104      	bne.n	8001982 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001980:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fa8c 	bl	8003ea4 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d103      	bne.n	800199e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2202      	movs	r2, #2
 800199c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fa7e 	bl	8003ea4 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b2:	d11c      	bne.n	80019ee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ce:	2110      	movs	r1, #16
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f002 f98d 	bl	8003cf0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019d6:	6938      	ldr	r0, [r7, #16]
 80019d8:	f002 f9ae 	bl	8003d38 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fb66 	bl	80040b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f005 f839 	bl	8006a60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fa56 	bl	8003ea4 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a02:	d102      	bne.n	8001a0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f001 fa03 	bl	8002e10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fa48 	bl	8003ea4 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d106      	bne.n	8001a2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f005 f802 	bl	8006a28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fa37 	bl	8003ea4 <USB_ReadInterrupts>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b10      	cmp	r3, #16
 8001a3e:	d101      	bne.n	8001a44 <HAL_HCD_IRQHandler+0x158>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_HCD_IRQHandler+0x15a>
 8001a44:	2300      	movs	r3, #0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d012      	beq.n	8001a70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f001 f906 	bl	8002c6c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0210 	orr.w	r2, r2, #16
 8001a6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fa15 	bl	8003ea4 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a84:	d13a      	bne.n	8001afc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fe28 	bl	80046e0 <USB_HC_ReadInterrupt>
 8001a90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e025      	b.n	8001ae4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8ab 	bl	8001c26 <HCD_HC_IN_IRQHandler>
 8001ad0:	e005      	b.n	8001ade <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fcc6 	bl	800246a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3d4      	bcc.n	8001a98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	e000      	b.n	8001afc <HAL_HCD_IRQHandler+0x210>
      return;
 8001afa:	bf00      	nop
    }
  }
}
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_HCD_Start+0x16>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e013      	b.n	8001b40 <HAL_HCD_Start+0x3e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fb28 	bl	800417c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 f86f 	bl	8003c14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_HCD_Stop+0x16>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e00d      	b.n	8001b7a <HAL_HCD_Stop+0x32>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 ff22 	bl	80049b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 faca 	bl	8004128 <USB_ResetPort>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	212c      	movs	r1, #44	; 0x2c
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3360      	adds	r3, #96	; 0x60
 8001bb8:	781b      	ldrb	r3, [r3, #0]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3350      	adds	r3, #80	; 0x50
 8001be0:	681b      	ldr	r3, [r3, #0]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fb0e 	bl	800421c <USB_GetCurrentFrame>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fae9 	bl	80041ee <USB_GetHostSpeed>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d119      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	461a      	mov	r2, r3
 8001c64:	2304      	movs	r3, #4
 8001c66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	0151      	lsls	r1, r2, #5
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	440a      	add	r2, r1
 8001c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	60d3      	str	r3, [r2, #12]
 8001c88:	e101      	b.n	8001e8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca0:	d12b      	bne.n	8001cfa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3361      	adds	r3, #97	; 0x61
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	0151      	lsls	r1, r2, #5
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	440a      	add	r2, r1
 8001cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fd05 	bl	8004702 <USB_HC_Halt>
 8001cf8:	e0c9      	b.n	8001e8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d109      	bne.n	8001d24 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2320      	movs	r3, #32
 8001d20:	6093      	str	r3, [r2, #8]
 8001d22:	e0b4      	b.n	8001e8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d133      	bne.n	8001da2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	0151      	lsls	r1, r2, #5
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	440a      	add	r2, r1
 8001d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	3361      	adds	r3, #97	; 0x61
 8001d68:	2205      	movs	r2, #5
 8001d6a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2310      	movs	r3, #16
 8001d7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fcb1 	bl	8004702 <USB_HC_Halt>
 8001da0:	e075      	b.n	8001e8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d134      	bne.n	8001e24 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	0151      	lsls	r1, r2, #5
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	440a      	add	r2, r1
 8001dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3361      	adds	r3, #97	; 0x61
 8001de8:	2208      	movs	r2, #8
 8001dea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fc70 	bl	8004702 <USB_HC_Halt>
 8001e22:	e034      	b.n	8001e8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	2b80      	cmp	r3, #128	; 0x80
 8001e38:	d129      	bne.n	8001e8e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	0151      	lsls	r1, r2, #5
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	440a      	add	r2, r1
 8001e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	212c      	movs	r1, #44	; 0x2c
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	3361      	adds	r3, #97	; 0x61
 8001e68:	2206      	movs	r2, #6
 8001e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fc43 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea4:	d122      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	0151      	lsls	r1, r2, #5
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	440a      	add	r2, r1
 8001ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fc16 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eea:	e2ba      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	f040 811b 	bne.w	800213a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d019      	beq.n	8001f40 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3348      	adds	r3, #72	; 0x48
 8001f1a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	0159      	lsls	r1, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	202c      	movs	r0, #44	; 0x2c
 8001f36:	fb00 f303 	mul.w	r3, r0, r3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3350      	adds	r3, #80	; 0x50
 8001f3e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3361      	adds	r3, #97	; 0x61
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	335c      	adds	r3, #92	; 0x5c
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2301      	movs	r3, #1
 8001f74:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	333f      	adds	r3, #63	; 0x3f
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	333f      	adds	r3, #63	; 0x3f
 8001f98:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d121      	bne.n	8001fe2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	0151      	lsls	r1, r2, #5
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	440a      	add	r2, r1
 8001fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fb9a 	bl	8004702 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2310      	movs	r3, #16
 8001fde:	6093      	str	r3, [r2, #8]
 8001fe0:	e066      	b.n	80020b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	333f      	adds	r3, #63	; 0x3f
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d127      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	440a      	add	r2, r1
 800200c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002014:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3360      	adds	r3, #96	; 0x60
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	b2d9      	uxtb	r1, r3
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	202c      	movs	r0, #44	; 0x2c
 8002032:	fb00 f303 	mul.w	r3, r0, r3
 8002036:	4413      	add	r3, r2
 8002038:	3360      	adds	r3, #96	; 0x60
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f004 fd1c 	bl	8006a7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002044:	e034      	b.n	80020b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	333f      	adds	r3, #63	; 0x3f
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d12a      	bne.n	80020b0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3360      	adds	r3, #96	; 0x60
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3354      	adds	r3, #84	; 0x54
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3354      	adds	r3, #84	; 0x54
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	b2d9      	uxtb	r1, r3
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	202c      	movs	r0, #44	; 0x2c
 800209e:	fb00 f303 	mul.w	r3, r0, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3360      	adds	r3, #96	; 0x60
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f004 fce6 	bl	8006a7c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d12b      	bne.n	8002110 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	3348      	adds	r3, #72	; 0x48
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	202c      	movs	r0, #44	; 0x2c
 80020ce:	fb00 f202 	mul.w	r2, r0, r2
 80020d2:	440a      	add	r2, r1
 80020d4:	3240      	adds	r2, #64	; 0x40
 80020d6:	8812      	ldrh	r2, [r2, #0]
 80020d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 81be 	beq.w	8002462 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3354      	adds	r3, #84	; 0x54
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2d8      	uxtb	r0, r3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3354      	adds	r3, #84	; 0x54
 800210a:	4602      	mov	r2, r0
 800210c:	701a      	strb	r2, [r3, #0]
}
 800210e:	e1a8      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3354      	adds	r3, #84	; 0x54
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2d8      	uxtb	r0, r3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3354      	adds	r3, #84	; 0x54
 8002134:	4602      	mov	r2, r0
 8002136:	701a      	strb	r2, [r3, #0]
}
 8002138:	e193      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b02      	cmp	r3, #2
 800214e:	f040 8106 	bne.w	800235e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	0151      	lsls	r1, r2, #5
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	440a      	add	r2, r1
 8002168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800216c:	f023 0302 	bic.w	r3, r3, #2
 8002170:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3361      	adds	r3, #97	; 0x61
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d109      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e0c9      	b.n	800232e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3361      	adds	r3, #97	; 0x61
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d109      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3360      	adds	r3, #96	; 0x60
 80021bc:	2205      	movs	r2, #5
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e0b5      	b.n	800232e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3361      	adds	r3, #97	; 0x61
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d009      	beq.n	80021ea <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3361      	adds	r3, #97	; 0x61
 80021e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d150      	bne.n	800228c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	335c      	adds	r3, #92	; 0x5c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	202c      	movs	r0, #44	; 0x2c
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	440b      	add	r3, r1
 8002208:	335c      	adds	r3, #92	; 0x5c
 800220a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	335c      	adds	r3, #92	; 0x5c
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d912      	bls.n	8002246 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	335c      	adds	r3, #92	; 0x5c
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3360      	adds	r3, #96	; 0x60
 8002240:	2204      	movs	r2, #4
 8002242:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002244:	e073      	b.n	800232e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3360      	adds	r3, #96	; 0x60
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800226e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002276:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800228a:	e050      	b.n	800232e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3361      	adds	r3, #97	; 0x61
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d122      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e023      	b.n	800232e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3361      	adds	r3, #97	; 0x61
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b07      	cmp	r3, #7
 80022f8:	d119      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	335c      	adds	r3, #92	; 0x5c
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	202c      	movs	r0, #44	; 0x2c
 8002312:	fb00 f303 	mul.w	r3, r0, r3
 8002316:	440b      	add	r3, r1
 8002318:	335c      	adds	r3, #92	; 0x5c
 800231a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	2204      	movs	r2, #4
 800232c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	2302      	movs	r3, #2
 800233e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	b2d9      	uxtb	r1, r3
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	202c      	movs	r0, #44	; 0x2c
 800234a:	fb00 f303 	mul.w	r3, r0, r3
 800234e:	4413      	add	r3, r2
 8002350:	3360      	adds	r3, #96	; 0x60
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f004 fb90 	bl	8006a7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800235c:	e081      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b10      	cmp	r3, #16
 8002372:	d176      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	333f      	adds	r3, #63	; 0x3f
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d121      	bne.n	80023cc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	335c      	adds	r3, #92	; 0x5c
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	0151      	lsls	r1, r2, #5
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	440a      	add	r2, r1
 80023b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 f99c 	bl	8004702 <USB_HC_Halt>
 80023ca:	e041      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	333f      	adds	r3, #63	; 0x3f
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	333f      	adds	r3, #63	; 0x3f
 80023ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d12d      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	335c      	adds	r3, #92	; 0x5c
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d120      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3361      	adds	r3, #97	; 0x61
 800241c:	2203      	movs	r2, #3
 800241e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f002 f959 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2310      	movs	r3, #16
 8002460:	6093      	str	r3, [r2, #8]
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b088      	sub	sp, #32
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d119      	bne.n	80024ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	461a      	mov	r2, r3
 80024a8:	2304      	movs	r3, #4
 80024aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024cc:	e3ca      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d13e      	bne.n	8002562 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	2320      	movs	r3, #32
 80024f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	333d      	adds	r3, #61	; 0x3d
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 83ac 	bne.w	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	333d      	adds	r3, #61	; 0x3d
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3360      	adds	r3, #96	; 0x60
 800252c:	2202      	movs	r2, #2
 800252e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	0151      	lsls	r1, r2, #5
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	440a      	add	r2, r1
 8002546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f002 f8d1 	bl	8004702 <USB_HC_Halt>
}
 8002560:	e380      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002578:	d122      	bne.n	80025c0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	0151      	lsls	r1, r2, #5
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	440a      	add	r2, r1
 8002590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 f8ac 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	461a      	mov	r2, r3
 80025b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025bc:	6093      	str	r3, [r2, #8]
}
 80025be:	e351      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d150      	bne.n	8002678 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d111      	bne.n	8002622 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	333d      	adds	r3, #61	; 0x3d
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	461a      	mov	r2, r3
 800261e:	2340      	movs	r3, #64	; 0x40
 8002620:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	0151      	lsls	r1, r2, #5
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	440a      	add	r2, r1
 8002638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f002 f858 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	2301      	movs	r3, #1
 8002662:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3361      	adds	r3, #97	; 0x61
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
}
 8002676:	e2f5      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d13c      	bne.n	8002708 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3361      	adds	r3, #97	; 0x61
 800269c:	2204      	movs	r2, #4
 800269e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	333d      	adds	r3, #61	; 0x3d
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	335c      	adds	r3, #92	; 0x5c
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	0151      	lsls	r1, r2, #5
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	440a      	add	r2, r1
 80026da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 f807 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	6093      	str	r3, [r2, #8]
}
 8002706:	e2ad      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b08      	cmp	r3, #8
 800271c:	d12a      	bne.n	8002774 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	2308      	movs	r3, #8
 800272e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	0151      	lsls	r1, r2, #5
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	440a      	add	r2, r1
 8002746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f001 ffd1 	bl	8004702 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3361      	adds	r3, #97	; 0x61
 800276e:	2205      	movs	r2, #5
 8002770:	701a      	strb	r2, [r3, #0]
}
 8002772:	e277      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b10      	cmp	r3, #16
 8002788:	d150      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3361      	adds	r3, #97	; 0x61
 80027aa:	2203      	movs	r2, #3
 80027ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	333d      	adds	r3, #61	; 0x3d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d112      	bne.n	80027e8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	333c      	adds	r3, #60	; 0x3c
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333d      	adds	r3, #61	; 0x3d
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	0151      	lsls	r1, r2, #5
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	440a      	add	r2, r1
 80027fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002802:	f043 0302 	orr.w	r3, r3, #2
 8002806:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f001 ff75 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	2310      	movs	r3, #16
 8002828:	6093      	str	r3, [r2, #8]
}
 800282a:	e21b      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d174      	bne.n	800292c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d121      	bne.n	800288e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3361      	adds	r3, #97	; 0x61
 8002858:	2206      	movs	r2, #6
 800285a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	440a      	add	r2, r1
 8002872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f001 ff3b 	bl	8004702 <USB_HC_Halt>
 800288c:	e044      	b.n	8002918 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	335c      	adds	r3, #92	; 0x5c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	202c      	movs	r0, #44	; 0x2c
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	440b      	add	r3, r1
 80028ac:	335c      	adds	r3, #92	; 0x5c
 80028ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	335c      	adds	r3, #92	; 0x5c
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d920      	bls.n	8002906 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	335c      	adds	r3, #92	; 0x5c
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3360      	adds	r3, #96	; 0x60
 80028e4:	2204      	movs	r2, #4
 80028e6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	b2d9      	uxtb	r1, r3
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	202c      	movs	r0, #44	; 0x2c
 80028f2:	fb00 f303 	mul.w	r3, r0, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3360      	adds	r3, #96	; 0x60
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f004 f8bc 	bl	8006a7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002904:	e008      	b.n	8002918 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	3360      	adds	r3, #96	; 0x60
 8002914:	2202      	movs	r2, #2
 8002916:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	6093      	str	r3, [r2, #8]
}
 800292a:	e19b      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d134      	bne.n	80029ae <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	0151      	lsls	r1, r2, #5
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	440a      	add	r2, r1
 800295a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fec7 	bl	8004702 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2310      	movs	r3, #16
 8002984:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002998:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3361      	adds	r3, #97	; 0x61
 80029a8:	2208      	movs	r2, #8
 80029aa:	701a      	strb	r2, [r3, #0]
}
 80029ac:	e15a      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	f040 814f 	bne.w	8002c64 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	0151      	lsls	r1, r2, #5
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	440a      	add	r2, r1
 80029dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e0:	f023 0302 	bic.w	r3, r3, #2
 80029e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3361      	adds	r3, #97	; 0x61
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d17d      	bne.n	8002af6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3360      	adds	r3, #96	; 0x60
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	333f      	adds	r3, #63	; 0x3f
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d00a      	beq.n	8002a36 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	333f      	adds	r3, #63	; 0x3f
 8002a2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	f040 8100 	bne.w	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d113      	bne.n	8002a66 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3355      	adds	r3, #85	; 0x55
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	f083 0301 	eor.w	r3, r3, #1
 8002a52:	b2d8      	uxtb	r0, r3
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3355      	adds	r3, #85	; 0x55
 8002a62:	4602      	mov	r2, r0
 8002a64:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 80e3 	bne.w	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	334c      	adds	r3, #76	; 0x4c
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80d8 	beq.w	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	334c      	adds	r3, #76	; 0x4c
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	202c      	movs	r0, #44	; 0x2c
 8002a9c:	fb00 f202 	mul.w	r2, r0, r2
 8002aa0:	440a      	add	r2, r1
 8002aa2:	3240      	adds	r2, #64	; 0x40
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	202c      	movs	r0, #44	; 0x2c
 8002ab0:	fb00 f202 	mul.w	r2, r0, r2
 8002ab4:	440a      	add	r2, r1
 8002ab6:	3240      	adds	r2, #64	; 0x40
 8002ab8:	8812      	ldrh	r2, [r2, #0]
 8002aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80b5 	beq.w	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3355      	adds	r3, #85	; 0x55
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	f083 0301 	eor.w	r3, r3, #1
 8002ae0:	b2d8      	uxtb	r0, r3
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3355      	adds	r3, #85	; 0x55
 8002af0:	4602      	mov	r2, r0
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e09f      	b.n	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3361      	adds	r3, #97	; 0x61
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d109      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3360      	adds	r3, #96	; 0x60
 8002b18:	2202      	movs	r2, #2
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e08b      	b.n	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d109      	bne.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3360      	adds	r3, #96	; 0x60
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e077      	b.n	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3361      	adds	r3, #97	; 0x61
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d109      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3360      	adds	r3, #96	; 0x60
 8002b68:	2205      	movs	r2, #5
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e063      	b.n	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3361      	adds	r3, #97	; 0x61
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d009      	beq.n	8002b96 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3361      	adds	r3, #97	; 0x61
 8002b90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d14f      	bne.n	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	202c      	movs	r0, #44	; 0x2c
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	335c      	adds	r3, #92	; 0x5c
 8002bb6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	335c      	adds	r3, #92	; 0x5c
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d912      	bls.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	335c      	adds	r3, #92	; 0x5c
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	2204      	movs	r2, #4
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e021      	b.n	8002c36 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c1a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c22:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c30:	461a      	mov	r2, r3
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	461a      	mov	r2, r3
 8002c44:	2302      	movs	r3, #2
 8002c46:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	b2d9      	uxtb	r1, r3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	202c      	movs	r0, #44	; 0x2c
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f003 ff0c 	bl	8006a7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	; 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	0c5b      	lsrs	r3, r3, #17
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d004      	beq.n	8002cb2 <HCD_RXQLVL_IRQHandler+0x46>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	f000 80a9 	beq.w	8002e02 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cb0:	e0aa      	b.n	8002e08 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a6 	beq.w	8002e06 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3344      	adds	r3, #68	; 0x44
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 809b 	beq.w	8002e06 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3350      	adds	r3, #80	; 0x50
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	202c      	movs	r0, #44	; 0x2c
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	440b      	add	r3, r1
 8002cf0:	334c      	adds	r3, #76	; 0x4c
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d87a      	bhi.n	8002dee <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3344      	adds	r3, #68	; 0x44
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f001 f86f 	bl	8003df4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3344      	adds	r3, #68	; 0x44
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	441a      	add	r2, r3
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	202c      	movs	r0, #44	; 0x2c
 8002d30:	fb00 f303 	mul.w	r3, r0, r3
 8002d34:	440b      	add	r3, r1
 8002d36:	3344      	adds	r3, #68	; 0x44
 8002d38:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3350      	adds	r3, #80	; 0x50
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	441a      	add	r2, r3
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	202c      	movs	r0, #44	; 0x2c
 8002d54:	fb00 f303 	mul.w	r3, r0, r3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3350      	adds	r3, #80	; 0x50
 8002d5c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	0cdb      	lsrs	r3, r3, #19
 8002d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d72:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3340      	adds	r3, #64	; 0x40
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d13c      	bne.n	8002e06 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d039      	beq.n	8002e06 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002da8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3354      	adds	r3, #84	; 0x54
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2d8      	uxtb	r0, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3354      	adds	r3, #84	; 0x54
 8002de8:	4602      	mov	r2, r0
 8002dea:	701a      	strb	r2, [r3, #0]
      break;
 8002dec:	e00b      	b.n	8002e06 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	701a      	strb	r2, [r3, #0]
      break;
 8002e00:	e001      	b.n	8002e06 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e06:	bf00      	nop
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3728      	adds	r7, #40	; 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d10b      	bne.n	8002e60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d102      	bne.n	8002e58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f003 fdf6 	bl	8006a44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d132      	bne.n	8002ed0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d126      	bne.n	8002eca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d113      	bne.n	8002eac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e8e:	d106      	bne.n	8002e9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2102      	movs	r1, #2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f90c 	bl	80040b4 <USB_InitFSLSPClkSel>
 8002e9c:	e011      	b.n	8002ec2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f001 f905 	bl	80040b4 <USB_InitFSLSPClkSel>
 8002eaa:	e00a      	b.n	8002ec2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ec0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f003 fde8 	bl	8006a98 <HAL_HCD_PortEnabled_Callback>
 8002ec8:	e002      	b.n	8002ed0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f003 fdf2 	bl	8006ab4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d103      	bne.n	8002ee2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f043 0320 	orr.w	r3, r3, #32
 8002ee0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	6013      	str	r3, [r2, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e12b      	b.n	8003162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd fdb4 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2224      	movs	r2, #36	; 0x24
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f000 fd5c 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a81      	ldr	r2, [pc, #516]	; (800316c <HAL_I2C_Init+0x274>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d807      	bhi.n	8002f7c <HAL_I2C_Init+0x84>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a80      	ldr	r2, [pc, #512]	; (8003170 <HAL_I2C_Init+0x278>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e006      	b.n	8002f8a <HAL_I2C_Init+0x92>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a7d      	ldr	r2, [pc, #500]	; (8003174 <HAL_I2C_Init+0x27c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0e7      	b.n	8003162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a78      	ldr	r2, [pc, #480]	; (8003178 <HAL_I2C_Init+0x280>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9b      	lsrs	r3, r3, #18
 8002f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	; (800316c <HAL_I2C_Init+0x274>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d802      	bhi.n	8002fcc <HAL_I2C_Init+0xd4>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	e009      	b.n	8002fe0 <HAL_I2C_Init+0xe8>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	4a69      	ldr	r2, [pc, #420]	; (800317c <HAL_I2C_Init+0x284>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	3301      	adds	r3, #1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	495c      	ldr	r1, [pc, #368]	; (800316c <HAL_I2C_Init+0x274>)
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d819      	bhi.n	8003034 <HAL_I2C_Init+0x13c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e59      	subs	r1, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb1 f3f3 	udiv	r3, r1, r3
 800300e:	1c59      	adds	r1, r3, #1
 8003010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003014:	400b      	ands	r3, r1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_I2C_Init+0x138>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e59      	subs	r1, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fbb1 f3f3 	udiv	r3, r1, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	e051      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003030:	2304      	movs	r3, #4
 8003032:	e04f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d111      	bne.n	8003060 <HAL_I2C_Init+0x168>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e58      	subs	r0, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e012      	b.n	8003086 <HAL_I2C_Init+0x18e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	0099      	lsls	r1, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Init+0x196>
 800308a:	2301      	movs	r3, #1
 800308c:	e022      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <HAL_I2C_Init+0x1bc>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1e58      	subs	r0, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	440b      	add	r3, r1
 80030a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b2:	e00f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e58      	subs	r0, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	0099      	lsls	r1, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	6809      	ldr	r1, [r1, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6911      	ldr	r1, [r2, #16]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	430b      	orrs	r3, r1
 8003116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	000186a0 	.word	0x000186a0
 8003170:	001e847f 	.word	0x001e847f
 8003174:	003d08ff 	.word	0x003d08ff
 8003178:	431bde83 	.word	0x431bde83
 800317c:	10624dd3 	.word	0x10624dd3

08003180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e264      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d075      	beq.n	800328a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800319e:	4ba3      	ldr	r3, [pc, #652]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d00c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4ba0      	ldr	r3, [pc, #640]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d112      	bne.n	80031dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b9d      	ldr	r3, [pc, #628]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c2:	d10b      	bne.n	80031dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	4b99      	ldr	r3, [pc, #612]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d05b      	beq.n	8003288 <HAL_RCC_OscConfig+0x108>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d157      	bne.n	8003288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e23f      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d106      	bne.n	80031f4 <HAL_RCC_OscConfig+0x74>
 80031e6:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a90      	ldr	r2, [pc, #576]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e01d      	b.n	8003230 <HAL_RCC_OscConfig+0xb0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x98>
 80031fe:	4b8b      	ldr	r3, [pc, #556]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a8a      	ldr	r2, [pc, #552]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a87      	ldr	r2, [pc, #540]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0xb0>
 8003218:	4b84      	ldr	r3, [pc, #528]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a83      	ldr	r2, [pc, #524]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b81      	ldr	r3, [pc, #516]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a80      	ldr	r2, [pc, #512]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800322a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fdc4 	bl	8000dc4 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003240:	f7fd fdc0 	bl	8000dc4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e204      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0xc0>
 800325e:	e014      	b.n	800328a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fd fdb0 	bl	8000dc4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fd fdac 	bl	8000dc4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1f0      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	4b6c      	ldr	r3, [pc, #432]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0xe8>
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d063      	beq.n	800335e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b62      	ldr	r3, [pc, #392]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d11c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d116      	bne.n	80032e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	4b5c      	ldr	r3, [pc, #368]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_RCC_OscConfig+0x152>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e1c4      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4952      	ldr	r1, [pc, #328]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	e03a      	b.n	800335e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f0:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <HAL_RCC_OscConfig+0x2b0>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fd fd65 	bl	8000dc4 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fe:	f7fd fd61 	bl	8000dc4 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1a5      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4940      	ldr	r1, [pc, #256]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800332c:	4313      	orrs	r3, r2
 800332e:	600b      	str	r3, [r1, #0]
 8003330:	e015      	b.n	800335e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HAL_RCC_OscConfig+0x2b0>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fd44 	bl	8000dc4 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003340:	f7fd fd40 	bl	8000dc4 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e184      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d030      	beq.n	80033cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCC_OscConfig+0x2b4>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fd fd24 	bl	8000dc4 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003380:	f7fd fd20 	bl	8000dc4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e164      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x200>
 800339e:	e015      	b.n	80033cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x2b4>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fd0d 	bl	8000dc4 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fd fd09 	bl	8000dc4 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e14d      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a0 	beq.w	800351a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_OscConfig+0x2b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d121      	bne.n	800345a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCC_OscConfig+0x2b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_RCC_OscConfig+0x2b8>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fd fccf 	bl	8000dc4 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e011      	b.n	800344e <HAL_RCC_OscConfig+0x2ce>
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	42470000 	.word	0x42470000
 8003434:	42470e80 	.word	0x42470e80
 8003438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fd fcc2 	bl	8000dc4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e106      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x4e4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d106      	bne.n	8003470 <HAL_RCC_OscConfig+0x2f0>
 8003462:	4b81      	ldr	r3, [pc, #516]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	e01c      	b.n	80034aa <HAL_RCC_OscConfig+0x32a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x312>
 8003478:	4b7b      	ldr	r3, [pc, #492]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a7a      	ldr	r2, [pc, #488]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
 8003484:	4b78      	ldr	r3, [pc, #480]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a77      	ldr	r2, [pc, #476]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	e00b      	b.n	80034aa <HAL_RCC_OscConfig+0x32a>
 8003492:	4b75      	ldr	r3, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a74      	ldr	r2, [pc, #464]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
 800349e:	4b72      	ldr	r3, [pc, #456]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a71      	ldr	r2, [pc, #452]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d015      	beq.n	80034de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fd fc87 	bl	8000dc4 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd fc83 	bl	8000dc4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0c5      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ee      	beq.n	80034ba <HAL_RCC_OscConfig+0x33a>
 80034dc:	e014      	b.n	8003508 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034de:	f7fd fc71 	bl	8000dc4 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fd fc6d 	bl	8000dc4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0af      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fc:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ee      	bne.n	80034e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d105      	bne.n	800351a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350e:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a55      	ldr	r2, [pc, #340]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 809b 	beq.w	800365a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b08      	cmp	r3, #8
 800352e:	d05c      	beq.n	80035ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d141      	bne.n	80035bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003538:	4b4c      	ldr	r3, [pc, #304]	; (800366c <HAL_RCC_OscConfig+0x4ec>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fd fc41 	bl	8000dc4 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003546:	f7fd fc3d 	bl	8000dc4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e081      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003558:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	019b      	lsls	r3, r3, #6
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <HAL_RCC_OscConfig+0x4ec>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fd fc16 	bl	8000dc4 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359c:	f7fd fc12 	bl	8000dc4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e056      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x41c>
 80035ba:	e04e      	b.n	800365a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x4ec>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fd fbff 	bl	8000dc4 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd fbfb 	bl	8000dc4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e03f      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x44a>
 80035e8:	e037      	b.n	800365a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e032      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_RCC_OscConfig+0x4e8>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d028      	beq.n	8003656 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d121      	bne.n	8003656 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d11a      	bne.n	8003656 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003626:	4013      	ands	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800362e:	4293      	cmp	r3, r2
 8003630:	d111      	bne.n	8003656 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40007000 	.word	0x40007000
 8003668:	40023800 	.word	0x40023800
 800366c:	42470060 	.word	0x42470060

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0cc      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b68      	ldr	r3, [pc, #416]	; (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d90c      	bls.n	80036ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b65      	ldr	r3, [pc, #404]	; (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0b8      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c4:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a58      	ldr	r2, [pc, #352]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036dc:	4b53      	ldr	r3, [pc, #332]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	494d      	ldr	r1, [pc, #308]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d044      	beq.n	8003790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d119      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07f      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d003      	beq.n	800372e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372a:	2b03      	cmp	r3, #3
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e06f      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	4b3b      	ldr	r3, [pc, #236]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e067      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4934      	ldr	r1, [pc, #208]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003760:	f7fd fb30 	bl	8000dc4 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	e00a      	b.n	800377e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003768:	f7fd fb2c 	bl	8000dc4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	; 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e04f      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 020c 	and.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	429a      	cmp	r2, r3
 800378e:	d1eb      	bne.n	8003768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d20c      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b20      	ldr	r3, [pc, #128]	; (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e032      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4916      	ldr	r1, [pc, #88]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	490e      	ldr	r1, [pc, #56]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037f6:	f000 f821 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	490a      	ldr	r1, [pc, #40]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	4a09      	ldr	r2, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fa90 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023c00 	.word	0x40023c00
 800382c:	40023800 	.word	0x40023800
 8003830:	080070e8 	.word	0x080070e8
 8003834:	20000000 	.word	0x20000000
 8003838:	20000004 	.word	0x20000004

0800383c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	2300      	movs	r3, #0
 800384e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003854:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d00d      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x40>
 8003860:	2b08      	cmp	r3, #8
 8003862:	f200 80bd 	bhi.w	80039e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x34>
 800386a:	2b04      	cmp	r3, #4
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x3a>
 800386e:	e0b7      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003872:	60bb      	str	r3, [r7, #8]
       break;
 8003874:	e0b7      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003876:	4b61      	ldr	r3, [pc, #388]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003878:	60bb      	str	r3, [r7, #8]
      break;
 800387a:	e0b4      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800387c:	4b5d      	ldr	r3, [pc, #372]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003884:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d04d      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003892:	4b58      	ldr	r3, [pc, #352]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	461a      	mov	r2, r3
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	ea02 0800 	and.w	r8, r2, r0
 80038aa:	ea03 0901 	and.w	r9, r3, r1
 80038ae:	4640      	mov	r0, r8
 80038b0:	4649      	mov	r1, r9
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	014b      	lsls	r3, r1, #5
 80038bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038c0:	0142      	lsls	r2, r0, #5
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	ebb0 0008 	subs.w	r0, r0, r8
 80038ca:	eb61 0109 	sbc.w	r1, r1, r9
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	018b      	lsls	r3, r1, #6
 80038d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038dc:	0182      	lsls	r2, r0, #6
 80038de:	1a12      	subs	r2, r2, r0
 80038e0:	eb63 0301 	sbc.w	r3, r3, r1
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	f04f 0100 	mov.w	r1, #0
 80038ec:	00d9      	lsls	r1, r3, #3
 80038ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038f2:	00d0      	lsls	r0, r2, #3
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	eb12 0208 	adds.w	r2, r2, r8
 80038fc:	eb43 0309 	adc.w	r3, r3, r9
 8003900:	f04f 0000 	mov.w	r0, #0
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	0259      	lsls	r1, r3, #9
 800390a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800390e:	0250      	lsls	r0, r2, #9
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	461a      	mov	r2, r3
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f7fc fc52 	bl	80001c8 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4613      	mov	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e04a      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	099b      	lsrs	r3, r3, #6
 8003934:	461a      	mov	r2, r3
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	ea02 0400 	and.w	r4, r2, r0
 8003946:	ea03 0501 	and.w	r5, r3, r1
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	014b      	lsls	r3, r1, #5
 8003958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800395c:	0142      	lsls	r2, r0, #5
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	1b00      	subs	r0, r0, r4
 8003964:	eb61 0105 	sbc.w	r1, r1, r5
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	018b      	lsls	r3, r1, #6
 8003972:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003976:	0182      	lsls	r2, r0, #6
 8003978:	1a12      	subs	r2, r2, r0
 800397a:	eb63 0301 	sbc.w	r3, r3, r1
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	00d9      	lsls	r1, r3, #3
 8003988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800398c:	00d0      	lsls	r0, r2, #3
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	1912      	adds	r2, r2, r4
 8003994:	eb45 0303 	adc.w	r3, r5, r3
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	0299      	lsls	r1, r3, #10
 80039a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039a6:	0290      	lsls	r0, r2, #10
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	f7fc fc06 	bl	80001c8 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	60bb      	str	r3, [r7, #8]
      break;
 80039de:	e002      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039e2:	60bb      	str	r3, [r7, #8]
      break;
 80039e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e6:	68bb      	ldr	r3, [r7, #8]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a9b      	lsrs	r3, r3, #10
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	080070f8 	.word	0x080070f8

08003a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e07b      	b.n	8003b4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a62:	d009      	beq.n	8003a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
 8003a6a:	e005      	b.n	8003a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd f842 	bl	8000b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	ea42 0103 	orr.w	r1, r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	f003 0104 	and.w	r1, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f003 0210 	and.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b52:	b084      	sub	sp, #16
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	f107 001c 	add.w	r0, r7, #28
 8003b60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d122      	bne.n	8003bb0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f99f 	bl	8003ee8 <USB_CoreReset>
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	e01a      	b.n	8003be6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f993 	bl	8003ee8 <USB_CoreReset>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8003bd8:	e005      	b.n	8003be6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d10b      	bne.n	8003c04 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f043 0206 	orr.w	r2, r3, #6
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c10:	b004      	add	sp, #16
 8003c12:	4770      	bx	lr

08003c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f023 0201 	bic.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d115      	bne.n	8003ca6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7fd f8a8 	bl	8000ddc <HAL_Delay>
      ms++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f919 	bl	8003eca <USB_GetMode>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d01e      	beq.n	8003cdc <USB_SetCurrentMode+0x84>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b31      	cmp	r3, #49	; 0x31
 8003ca2:	d9f0      	bls.n	8003c86 <USB_SetCurrentMode+0x2e>
 8003ca4:	e01a      	b.n	8003cdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d115      	bne.n	8003cd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f7fd f88f 	bl	8000ddc <HAL_Delay>
      ms++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f900 	bl	8003eca <USB_GetMode>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <USB_SetCurrentMode+0x84>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b31      	cmp	r3, #49	; 0x31
 8003cd4:	d9f0      	bls.n	8003cb8 <USB_SetCurrentMode+0x60>
 8003cd6:	e001      	b.n	8003cdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e005      	b.n	8003ce8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b32      	cmp	r3, #50	; 0x32
 8003ce0:	d101      	bne.n	8003ce6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <USB_FlushTxFifo+0x44>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e006      	b.n	8003d28 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d0f1      	beq.n	8003d0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	00030d40 	.word	0x00030d40

08003d38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2210      	movs	r2, #16
 8003d48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <USB_FlushRxFifo+0x3c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e006      	b.n	8003d68 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d0f1      	beq.n	8003d4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	00030d40 	.word	0x00030d40

08003d78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	; 0x24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	460b      	mov	r3, r1
 8003d88:	71fb      	strb	r3, [r7, #7]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d123      	bne.n	8003de6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d9e:	88bb      	ldrh	r3, [r7, #4]
 8003da0:	3303      	adds	r3, #3
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e018      	b.n	8003dde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	031a      	lsls	r2, r3, #12
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db8:	461a      	mov	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d3e2      	bcc.n	8003dac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3724      	adds	r7, #36	; 0x24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b08b      	sub	sp, #44	; 0x2c
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	e014      	b.n	8003e4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	3301      	adds	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	3301      	adds	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	3301      	adds	r3, #1
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	3301      	adds	r3, #1
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	6a3a      	ldr	r2, [r7, #32]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3e6      	bcc.n	8003e20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e52:	8bfb      	ldrh	r3, [r7, #30]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01e      	beq.n	8003e96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e62:	461a      	mov	r2, r3
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	701a      	strb	r2, [r3, #0]
      i++;
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	3301      	adds	r3, #1
 8003e82:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	3301      	adds	r3, #1
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e8a:	8bfb      	ldrh	r3, [r7, #30]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e90:	8bfb      	ldrh	r3, [r7, #30]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ea      	bne.n	8003e6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	372c      	adds	r7, #44	; 0x2c
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <USB_CoreReset+0x60>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e01a      	b.n	8003f3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	daf3      	bge.n	8003ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f043 0201 	orr.w	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <USB_CoreReset+0x60>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d0f1      	beq.n	8003f1c <USB_CoreReset+0x34>

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	00030d40 	.word	0x00030d40

08003f4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	f107 001c 	add.w	r0, r7, #28
 8003f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10a      	bne.n	8003fba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	e014      	b.n	8003fe4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e009      	b.n	8003fe4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003fe4:	2110      	movs	r1, #16
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fe82 	bl	8003cf0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff fea3 	bl	8003d38 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e015      	b.n	8004024 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004004:	461a      	mov	r2, r3
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	429a      	cmp	r2, r3
 800402a:	d3e5      	bcc.n	8003ff8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f04f 32ff 	mov.w	r2, #4294967295
 8004038:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <USB_HostInit+0x154>)
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <USB_HostInit+0x158>)
 8004058:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800405c:	e009      	b.n	8004072 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <USB_HostInit+0x15c>)
 8004068:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <USB_HostInit+0x160>)
 800406e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f043 0210 	orr.w	r2, r3, #16
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <USB_HostInit+0x164>)
 800408a:	4313      	orrs	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800409c:	b004      	add	sp, #16
 800409e:	4770      	bx	lr
 80040a0:	01000200 	.word	0x01000200
 80040a4:	00e00300 	.word	0x00e00300
 80040a8:	00600080 	.word	0x00600080
 80040ac:	004000e0 	.word	0x004000e0
 80040b0:	a3200008 	.word	0xa3200008

080040b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040fc:	461a      	mov	r2, r3
 80040fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004102:	6053      	str	r3, [r2, #4]
 8004104:	e009      	b.n	800411a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d106      	bne.n	800411a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004112:	461a      	mov	r2, r3
 8004114:	f241 7370 	movw	r3, #6000	; 0x1770
 8004118:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004148:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004158:	2064      	movs	r0, #100	; 0x64
 800415a:	f7fc fe3f 	bl	8000ddc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800416c:	200a      	movs	r0, #10
 800416e:	f7fc fe35 	bl	8000ddc <HAL_Delay>

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <USB_DriveVbus+0x44>
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d106      	bne.n	80041c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80041ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d109      	bne.n	80041e0 <USB_DriveVbus+0x64>
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80041da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0c5b      	lsrs	r3, r3, #17
 800420c:	f003 0303 	and.w	r3, r3, #3
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	b29b      	uxth	r3, r3
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4603      	mov	r3, r0
 8004250:	70fb      	strb	r3, [r7, #3]
 8004252:	460b      	mov	r3, r1
 8004254:	70bb      	strb	r3, [r7, #2]
 8004256:	4613      	mov	r3, r2
 8004258:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	f04f 33ff 	mov.w	r3, #4294967295
 8004274:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004276:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800427a:	2b03      	cmp	r3, #3
 800427c:	d87e      	bhi.n	800437c <USB_HC_Init+0x13c>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <USB_HC_Init+0x44>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	08004295 	.word	0x08004295
 8004288:	0800433f 	.word	0x0800433f
 800428c:	08004295 	.word	0x08004295
 8004290:	08004301 	.word	0x08004301
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	461a      	mov	r2, r3
 80042a2:	f240 439d 	movw	r3, #1181	; 0x49d
 80042a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80042a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	da10      	bge.n	80042d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80042d0:	e057      	b.n	8004382 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d051      	beq.n	8004382 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042fc:	60d3      	str	r3, [r2, #12]
      break;
 80042fe:	e040      	b.n	8004382 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430c:	461a      	mov	r2, r3
 800430e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004312:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004314:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da34      	bge.n	8004386 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	440a      	add	r2, r1
 8004332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800433c:	e023      	b.n	8004386 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434a:	461a      	mov	r2, r3
 800434c:	f240 2325 	movw	r3, #549	; 0x225
 8004350:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004352:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da17      	bge.n	800438a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	440a      	add	r2, r1
 8004370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004374:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004378:	60d3      	str	r3, [r2, #12]
      }
      break;
 800437a:	e006      	b.n	800438a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	77fb      	strb	r3, [r7, #31]
      break;
 8004380:	e004      	b.n	800438c <USB_HC_Init+0x14c>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <USB_HC_Init+0x14c>
      break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <USB_HC_Init+0x14c>
      break;
 800438a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	6939      	ldr	r1, [r7, #16]
 80043a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043a6:	4313      	orrs	r3, r2
 80043a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80043b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da03      	bge.n	80043c6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e001      	b.n	80043ca <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff ff0f 	bl	80041ee <USB_GetHostSpeed>
 80043d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80043d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d106      	bne.n	80043e8 <USB_HC_Init+0x1a8>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d003      	beq.n	80043e8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80043e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e001      	b.n	80043ec <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043ec:	787b      	ldrb	r3, [r7, #1]
 80043ee:	059b      	lsls	r3, r3, #22
 80043f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80043f4:	78bb      	ldrb	r3, [r7, #2]
 80043f6:	02db      	lsls	r3, r3, #11
 80043f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80043fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004402:	049b      	lsls	r3, r3, #18
 8004404:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004408:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800440a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800440c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004410:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	0159      	lsls	r1, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	440b      	add	r3, r1
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004428:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800442a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800442e:	2b03      	cmp	r3, #3
 8004430:	d10f      	bne.n	8004452 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004450:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004452:	7ffb      	ldrb	r3, [r7, #31]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004478:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02d      	beq.n	80044e2 <USB_HC_StartXfer+0x86>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d129      	bne.n	80044e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d117      	bne.n	80044c4 <USB_HC_StartXfer+0x68>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	79db      	ldrb	r3, [r3, #7]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <USB_HC_StartXfer+0x48>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	79db      	ldrb	r3, [r3, #7]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d10f      	bne.n	80044c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <USB_HC_StartXfer+0x86>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	795b      	ldrb	r3, [r3, #5]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	785b      	ldrb	r3, [r3, #1]
 80044d6:	4619      	mov	r1, r3
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fa2f 	bl	800493c <USB_DoPing>
      return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e0f8      	b.n	80046d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d018      	beq.n	800451c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	8912      	ldrh	r2, [r2, #8]
 80044f2:	4413      	add	r3, r2
 80044f4:	3b01      	subs	r3, #1
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	8912      	ldrh	r2, [r2, #8]
 80044fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80044fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004500:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004502:	8b7b      	ldrh	r3, [r7, #26]
 8004504:	429a      	cmp	r2, r3
 8004506:	d90b      	bls.n	8004520 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004508:	8b7b      	ldrh	r3, [r7, #26]
 800450a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800450c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	8912      	ldrh	r2, [r2, #8]
 8004512:	fb02 f203 	mul.w	r2, r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	611a      	str	r2, [r3, #16]
 800451a:	e001      	b.n	8004520 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800451c:	2301      	movs	r3, #1
 800451e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	78db      	ldrb	r3, [r3, #3]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	8912      	ldrh	r2, [r2, #8]
 800452e:	fb02 f203 	mul.w	r2, r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	611a      	str	r2, [r3, #16]
 8004536:	e003      	b.n	8004540 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800454a:	04d9      	lsls	r1, r3, #19
 800454c:	4b63      	ldr	r3, [pc, #396]	; (80046dc <USB_HC_StartXfer+0x280>)
 800454e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004550:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	7a9b      	ldrb	r3, [r3, #10]
 8004556:	075b      	lsls	r3, r3, #29
 8004558:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800455c:	69f9      	ldr	r1, [r7, #28]
 800455e:	0148      	lsls	r0, r1, #5
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	4401      	add	r1, r0
 8004564:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004568:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800456a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	68d9      	ldr	r1, [r3, #12]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	460a      	mov	r2, r1
 8004584:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf0c      	ite	eq
 8004596:	2301      	moveq	r3, #1
 8004598:	2300      	movne	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	7e7b      	ldrb	r3, [r7, #25]
 80045ce:	075b      	lsls	r3, r3, #29
 80045d0:	69f9      	ldr	r1, [r7, #28]
 80045d2:	0148      	lsls	r0, r1, #5
 80045d4:	6a39      	ldr	r1, [r7, #32]
 80045d6:	4401      	add	r1, r0
 80045d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	e003      	b.n	8004612 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004610:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004618:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	461a      	mov	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e04e      	b.n	80046d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	78db      	ldrb	r3, [r3, #3]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d149      	bne.n	80046d2 <USB_HC_StartXfer+0x276>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d045      	beq.n	80046d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	79db      	ldrb	r3, [r3, #7]
 800464a:	2b03      	cmp	r3, #3
 800464c:	d830      	bhi.n	80046b0 <USB_HC_StartXfer+0x254>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <USB_HC_StartXfer+0x1f8>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004665 	.word	0x08004665
 8004658:	08004689 	.word	0x08004689
 800465c:	08004665 	.word	0x08004665
 8004660:	08004689 	.word	0x08004689
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	3303      	adds	r3, #3
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800466e:	8afa      	ldrh	r2, [r7, #22]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	b29b      	uxth	r3, r3
 8004676:	429a      	cmp	r2, r3
 8004678:	d91c      	bls.n	80046b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	619a      	str	r2, [r3, #24]
        }
        break;
 8004686:	e015      	b.n	80046b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	3303      	adds	r3, #3
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004692:	8afa      	ldrh	r2, [r7, #22]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	b29b      	uxth	r3, r3
 800469e:	429a      	cmp	r2, r3
 80046a0:	d90a      	bls.n	80046b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80046ae:	e003      	b.n	80046b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80046b0:	bf00      	nop
 80046b2:	e002      	b.n	80046ba <USB_HC_StartXfer+0x25e>
        break;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <USB_HC_StartXfer+0x25e>
        break;
 80046b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	785a      	ldrb	r2, [r3, #1]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2000      	movs	r0, #0
 80046ca:	9000      	str	r0, [sp, #0]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fb53 	bl	8003d78 <USB_WritePacket>
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3728      	adds	r7, #40	; 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	1ff80000 	.word	0x1ff80000

080046e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	b29b      	uxth	r3, r3
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004702:	b480      	push	{r7}
 8004704:	b089      	sub	sp, #36	; 0x24
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4413      	add	r3, r2
 8004722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	0c9b      	lsrs	r3, r3, #18
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	0fdb      	lsrs	r3, r3, #31
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b20      	cmp	r3, #32
 8004750:	d104      	bne.n	800475c <USB_HC_Halt+0x5a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e0e8      	b.n	800492e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <USB_HC_Halt+0x66>
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d173      	bne.n	8004850 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	440a      	add	r2, r1
 800477e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004786:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	f040 80cb 	bne.w	800492c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d143      	bne.n	800482a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004800:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800480e:	d81d      	bhi.n	800484c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004826:	d0ec      	beq.n	8004802 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004828:	e080      	b.n	800492c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	440a      	add	r2, r1
 8004840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004848:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800484a:	e06f      	b.n	800492c <USB_HC_Halt+0x22a>
            break;
 800484c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800484e:	e06d      	b.n	800492c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	4413      	add	r3, r2
 8004858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	440a      	add	r2, r1
 8004866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800486a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800486e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d143      	bne.n	8004908 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	440a      	add	r2, r1
 8004896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800489a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800489e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048de:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3301      	adds	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ec:	d81d      	bhi.n	800492a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004904:	d0ec      	beq.n	80048e0 <USB_HC_Halt+0x1de>
 8004906:	e011      	b.n	800492c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	4413      	add	r3, r2
 8004910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	440a      	add	r2, r1
 800491e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e000      	b.n	800492c <USB_HC_Halt+0x22a>
          break;
 800492a:	bf00      	nop
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3724      	adds	r7, #36	; 0x24
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004950:	2301      	movs	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	04da      	lsls	r2, r3, #19
 8004958:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <USB_DoPing+0x74>)
 800495a:	4013      	ands	r3, r2
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	440a      	add	r2, r1
 8004964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800496c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	4413      	add	r3, r2
 8004976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004984:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800498c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	1ff80000 	.word	0x1ff80000

080049b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff f936 	bl	8003c36 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80049ca:	2110      	movs	r1, #16
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff f98f 	bl	8003cf0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff f9b0 	bl	8003d38 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e01f      	b.n	8004a1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a12:	461a      	mov	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b0f      	cmp	r3, #15
 8004a22:	d9dc      	bls.n	80049de <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	e034      	b.n	8004a94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3301      	adds	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a70:	d80c      	bhi.n	8004a8c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a88:	d0ec      	beq.n	8004a64 <USB_StopHost+0xb0>
 8004a8a:	e000      	b.n	8004a8e <USB_StopHost+0xda>
        break;
 8004a8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3301      	adds	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d9c7      	bls.n	8004a2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004aae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff f8af 	bl	8003c14 <USB_EnableGlobalInt>

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b089      	sub	sp, #36	; 0x24
 8004ac4:	af04      	add	r7, sp, #16
 8004ac6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004ac8:	2301      	movs	r3, #1
 8004aca:	2202      	movs	r2, #2
 8004acc:	2102      	movs	r1, #2
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fc66 	bl	80053a0 <USBH_FindInterface>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2bff      	cmp	r3, #255	; 0xff
 8004adc:	d002      	beq.n	8004ae4 <USBH_CDC_InterfaceInit+0x24>
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d901      	bls.n	8004ae8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e13d      	b.n	8004d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fc3b 	bl	8005368 <USBH_SelectInterface>
 8004af2:	4603      	mov	r3, r0
 8004af4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004afc:	2302      	movs	r3, #2
 8004afe:	e131      	b.n	8004d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004b06:	2050      	movs	r0, #80	; 0x50
 8004b08:	f002 fa00 	bl	8006f0c <malloc>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004b20:	2302      	movs	r3, #2
 8004b22:	e11f      	b.n	8004d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004b24:	2250      	movs	r2, #80	; 0x50
 8004b26:	2100      	movs	r1, #0
 8004b28:	68b8      	ldr	r0, [r7, #8]
 8004b2a:	f002 f9ff 	bl	8006f2c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	211a      	movs	r1, #26
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da15      	bge.n	8004b72 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	211a      	movs	r1, #26
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	4413      	add	r3, r2
 8004b52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	211a      	movs	r1, #26
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 fe32 	bl	80067e2 <USBH_AllocPipe>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	7819      	ldrb	r1, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	7858      	ldrb	r0, [r3, #1]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	8952      	ldrh	r2, [r2, #10]
 8004b9e:	9202      	str	r2, [sp, #8]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	9201      	str	r2, [sp, #4]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f001 fdea 	bl	8006784 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f002 f8f9 	bl	8006db0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	210a      	movs	r1, #10
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fbeb 	bl	80053a0 <USBH_FindInterface>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2bff      	cmp	r3, #255	; 0xff
 8004bd2:	d002      	beq.n	8004bda <USBH_CDC_InterfaceInit+0x11a>
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d901      	bls.n	8004bde <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e0c2      	b.n	8004d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	211a      	movs	r1, #26
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	4413      	add	r3, r2
 8004bea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da16      	bge.n	8004c24 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	211a      	movs	r1, #26
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004c06:	781a      	ldrb	r2, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	211a      	movs	r1, #26
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004c1c:	881a      	ldrh	r2, [r3, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	835a      	strh	r2, [r3, #26]
 8004c22:	e015      	b.n	8004c50 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	211a      	movs	r1, #26
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	211a      	movs	r1, #26
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	211a      	movs	r1, #26
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da16      	bge.n	8004c96 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	211a      	movs	r1, #26
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	211a      	movs	r1, #26
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	835a      	strh	r2, [r3, #26]
 8004c94:	e015      	b.n	8004cc2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	211a      	movs	r1, #26
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004ca6:	781a      	ldrb	r2, [r3, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	211a      	movs	r1, #26
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004cbc:	881a      	ldrh	r2, [r3, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	7b9b      	ldrb	r3, [r3, #14]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 fd8a 	bl	80067e2 <USBH_AllocPipe>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	7bdb      	ldrb	r3, [r3, #15]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 fd80 	bl	80067e2 <USBH_AllocPipe>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	7b59      	ldrb	r1, [r3, #13]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	7b98      	ldrb	r0, [r3, #14]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	8b12      	ldrh	r2, [r2, #24]
 8004d02:	9202      	str	r2, [sp, #8]
 8004d04:	2202      	movs	r2, #2
 8004d06:	9201      	str	r2, [sp, #4]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 fd38 	bl	8006784 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	7b19      	ldrb	r1, [r3, #12]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	7bd8      	ldrb	r0, [r3, #15]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	8b52      	ldrh	r2, [r2, #26]
 8004d2c:	9202      	str	r2, [sp, #8]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	9201      	str	r2, [sp, #4]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4623      	mov	r3, r4
 8004d36:	4602      	mov	r2, r0
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 fd23 	bl	8006784 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	7b5b      	ldrb	r3, [r3, #13]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f002 f82e 	bl	8006db0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	7b1b      	ldrb	r3, [r3, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f002 f827 	bl	8006db0 <USBH_LL_SetToggle>

  return USBH_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd90      	pop	{r4, r7, pc}

08004d6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00e      	beq.n	8004da4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f001 fd18 	bl	80067c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f001 fd43 	bl	8006824 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	7b1b      	ldrb	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	7b1b      	ldrb	r3, [r3, #12]
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f001 fd05 	bl	80067c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	7b1b      	ldrb	r3, [r3, #12]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fd30 	bl	8006824 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	7b5b      	ldrb	r3, [r3, #13]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	7b5b      	ldrb	r3, [r3, #13]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 fcf2 	bl	80067c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	7b5b      	ldrb	r3, [r3, #13]
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fd1d 	bl	8006824 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f002 f889 	bl	8006f1c <free>
    phost->pActiveClass->pData = 0U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e10:	2200      	movs	r2, #0
 8004e12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3340      	adds	r3, #64	; 0x40
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8b1 	bl	8004f9e <GetLineCoding>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004e40:	7afb      	ldrb	r3, [r7, #11]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d105      	bne.n	8004e52 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004e52:	7afb      	ldrb	r3, [r7, #11]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d877      	bhi.n	8004f70 <USBH_CDC_Process+0x114>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <USBH_CDC_Process+0x2c>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004e9d 	.word	0x08004e9d
 8004e8c:	08004ea3 	.word	0x08004ea3
 8004e90:	08004ed3 	.word	0x08004ed3
 8004e94:	08004f47 	.word	0x08004f47
 8004e98:	08004f55 	.word	0x08004f55
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea0:	e06d      	b.n	8004f7e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f897 	bl	8004fdc <SetLineCoding>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004eb2:	7bbb      	ldrb	r3, [r7, #14]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004ec0:	e058      	b.n	8004f74 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004ec2:	7bbb      	ldrb	r3, [r7, #14]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d055      	beq.n	8004f74 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004ed0:	e050      	b.n	8004f74 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3340      	adds	r3, #64	; 0x40
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f860 	bl	8004f9e <GetLineCoding>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d126      	bne.n	8004f36 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efa:	791b      	ldrb	r3, [r3, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d13b      	bne.n	8004f78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d133      	bne.n	8004f78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d12b      	bne.n	8004f78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d124      	bne.n	8004f78 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f958 	bl	80051e4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004f34:	e020      	b.n	8004f78 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d01d      	beq.n	8004f78 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2204      	movs	r2, #4
 8004f40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004f44:	e018      	b.n	8004f78 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f867 	bl	800501a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8da 	bl	8005106 <CDC_ProcessReception>
      break;
 8004f52:	e014      	b.n	8004f7e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004f54:	2100      	movs	r1, #0
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 ffe3 	bl	8005f22 <USBH_ClrFeature>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004f6e:	e005      	b.n	8004f7c <USBH_CDC_Process+0x120>

    default:
      break;
 8004f70:	bf00      	nop
 8004f72:	e004      	b.n	8004f7e <USBH_CDC_Process+0x122>
      break;
 8004f74:	bf00      	nop
 8004f76:	e002      	b.n	8004f7e <USBH_CDC_Process+0x122>
      break;
 8004f78:	bf00      	nop
 8004f7a:	e000      	b.n	8004f7e <USBH_CDC_Process+0x122>
      break;
 8004f7c:	bf00      	nop

  }

  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	22a1      	movs	r2, #161	; 0xa1
 8004fac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2221      	movs	r2, #33	; 0x21
 8004fb2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2207      	movs	r2, #7
 8004fc4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 f988 	bl	80062e2 <USBH_CtlReq>
 8004fd2:	4603      	mov	r3, r0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2221      	movs	r2, #33	; 0x21
 8004fea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2207      	movs	r2, #7
 8005002:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2207      	movs	r2, #7
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 f969 	bl	80062e2 <USBH_CtlReq>
 8005010:	4603      	mov	r3, r0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af02      	add	r7, sp, #8
 8005020:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800502c:	2300      	movs	r3, #0
 800502e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005036:	2b01      	cmp	r3, #1
 8005038:	d002      	beq.n	8005040 <CDC_ProcessTransmission+0x26>
 800503a:	2b02      	cmp	r3, #2
 800503c:	d023      	beq.n	8005086 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800503e:	e05e      	b.n	80050fe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	8b12      	ldrh	r2, [r2, #24]
 8005048:	4293      	cmp	r3, r2
 800504a:	d90b      	bls.n	8005064 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	69d9      	ldr	r1, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8b1a      	ldrh	r2, [r3, #24]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	7b5b      	ldrb	r3, [r3, #13]
 8005058:	2001      	movs	r0, #1
 800505a:	9000      	str	r0, [sp, #0]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f001 fb4e 	bl	80066fe <USBH_BulkSendData>
 8005062:	e00b      	b.n	800507c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	7b5b      	ldrb	r3, [r3, #13]
 8005072:	2001      	movs	r0, #1
 8005074:	9000      	str	r0, [sp, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f001 fb41 	bl	80066fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005084:	e03b      	b.n	80050fe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	7b5b      	ldrb	r3, [r3, #13]
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f001 fe65 	bl	8006d5c <USBH_LL_GetURBState>
 8005092:	4603      	mov	r3, r0
 8005094:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005096:	7afb      	ldrb	r3, [r7, #11]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d128      	bne.n	80050ee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	8b12      	ldrh	r2, [r2, #24]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d90e      	bls.n	80050c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	8b12      	ldrh	r2, [r2, #24]
 80050b0:	1a9a      	subs	r2, r3, r2
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	8b12      	ldrh	r2, [r2, #24]
 80050be:	441a      	add	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	61da      	str	r2, [r3, #28]
 80050c4:	e002      	b.n	80050cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80050dc:	e00e      	b.n	80050fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f868 	bl	80051bc <USBH_CDC_TransmitCallback>
      break;
 80050ec:	e006      	b.n	80050fc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d103      	bne.n	80050fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80050fc:	bf00      	nop
  }
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005118:	2300      	movs	r3, #0
 800511a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005122:	2b03      	cmp	r3, #3
 8005124:	d002      	beq.n	800512c <CDC_ProcessReception+0x26>
 8005126:	2b04      	cmp	r3, #4
 8005128:	d00e      	beq.n	8005148 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800512a:	e043      	b.n	80051b4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	6a19      	ldr	r1, [r3, #32]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	8b5a      	ldrh	r2, [r3, #26]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	7b1b      	ldrb	r3, [r3, #12]
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f001 fb05 	bl	8006748 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2204      	movs	r2, #4
 8005142:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005146:	e035      	b.n	80051b4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	7b1b      	ldrb	r3, [r3, #12]
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 fe04 	bl	8006d5c <USBH_LL_GetURBState>
 8005154:	4603      	mov	r3, r0
 8005156:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d129      	bne.n	80051b2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	7b1b      	ldrb	r3, [r3, #12]
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fd67 	bl	8006c38 <USBH_LL_GetLastXferSize>
 800516a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	429a      	cmp	r2, r3
 8005174:	d016      	beq.n	80051a4 <CDC_ProcessReception+0x9e>
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	8b5b      	ldrh	r3, [r3, #26]
 800517a:	461a      	mov	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4293      	cmp	r3, r2
 8005180:	d910      	bls.n	80051a4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6a1a      	ldr	r2, [r3, #32]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	441a      	add	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2203      	movs	r2, #3
 800519e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80051a2:	e006      	b.n	80051b2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f80f 	bl	80051d0 <USBH_CDC_ReceiveCallback>
      break;
 80051b2:	bf00      	nop
  }
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800520c:	2302      	movs	r3, #2
 800520e:	e029      	b.n	8005264 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	79fa      	ldrb	r2, [r7, #7]
 8005214:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f81f 	bl	800526c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f001 fc37 	bl	8006ad0 <USBH_LL_Init>

  return USBH_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e009      	b.n	8005292 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	33e0      	adds	r3, #224	; 0xe0
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	2200      	movs	r2, #0
 800528a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b0e      	cmp	r3, #14
 8005296:	d9f2      	bls.n	800527e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e009      	b.n	80052b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b8:	d3f1      	bcc.n	800529e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2240      	movs	r2, #64	; 0x40
 80052de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d016      	beq.n	8005356 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10e      	bne.n	8005350 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	33de      	adds	r3, #222	; 0xde
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]
 800534e:	e004      	b.n	800535a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005350:	2302      	movs	r3, #2
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e001      	b.n	800535a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005356:	2302      	movs	r3, #2
 8005358:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	429a      	cmp	r2, r3
 8005382:	d204      	bcs.n	800538e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800538c:	e001      	b.n	8005392 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800538e:	2302      	movs	r3, #2
 8005390:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	70fb      	strb	r3, [r7, #3]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70bb      	strb	r3, [r7, #2]
 80053b6:	4613      	mov	r3, r2
 80053b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80053be:	2300      	movs	r3, #0
 80053c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80053c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80053ca:	e025      	b.n	8005418 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	221a      	movs	r2, #26
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	3308      	adds	r3, #8
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	3302      	adds	r3, #2
 80053dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	795b      	ldrb	r3, [r3, #5]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d002      	beq.n	80053ee <USBH_FindInterface+0x4e>
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	2bff      	cmp	r3, #255	; 0xff
 80053ec:	d111      	bne.n	8005412 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80053f2:	78ba      	ldrb	r2, [r7, #2]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d002      	beq.n	80053fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80053f8:	78bb      	ldrb	r3, [r7, #2]
 80053fa:	2bff      	cmp	r3, #255	; 0xff
 80053fc:	d109      	bne.n	8005412 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005402:	787a      	ldrb	r2, [r7, #1]
 8005404:	429a      	cmp	r2, r3
 8005406:	d002      	beq.n	800540e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005408:	787b      	ldrb	r3, [r7, #1]
 800540a:	2bff      	cmp	r3, #255	; 0xff
 800540c:	d101      	bne.n	8005412 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	e006      	b.n	8005420 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	3301      	adds	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d9d6      	bls.n	80053cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800541e:	23ff      	movs	r3, #255	; 0xff
}
 8005420:	4618      	mov	r0, r3
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fb87 	bl	8006b48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800543a:	2101      	movs	r1, #1
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fca0 	bl	8006d82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af04      	add	r7, sp, #16
 8005452:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005454:	2302      	movs	r3, #2
 8005456:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d102      	bne.n	800546e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2203      	movs	r2, #3
 800546c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b0b      	cmp	r3, #11
 8005476:	f200 81b3 	bhi.w	80057e0 <USBH_Process+0x394>
 800547a:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <USBH_Process+0x34>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	080054b1 	.word	0x080054b1
 8005484:	080054e3 	.word	0x080054e3
 8005488:	0800554b 	.word	0x0800554b
 800548c:	0800577b 	.word	0x0800577b
 8005490:	080057e1 	.word	0x080057e1
 8005494:	080055ef 	.word	0x080055ef
 8005498:	08005721 	.word	0x08005721
 800549c:	08005625 	.word	0x08005625
 80054a0:	08005645 	.word	0x08005645
 80054a4:	08005665 	.word	0x08005665
 80054a8:	08005693 	.word	0x08005693
 80054ac:	08005763 	.word	0x08005763
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8193 	beq.w	80057e4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80054c4:	20c8      	movs	r0, #200	; 0xc8
 80054c6:	f001 fca3 	bl	8006e10 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 fb99 	bl	8006c02 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80054e0:	e180      	b.n	80057e4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d107      	bne.n	80054fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80054fa:	e182      	b.n	8005802 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005506:	d914      	bls.n	8005532 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800550e:	3301      	adds	r3, #1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800551e:	2b03      	cmp	r3, #3
 8005520:	d903      	bls.n	800552a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	220d      	movs	r2, #13
 8005526:	701a      	strb	r2, [r3, #0]
      break;
 8005528:	e16b      	b.n	8005802 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
      break;
 8005530:	e167      	b.n	8005802 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005538:	f103 020a 	add.w	r2, r3, #10
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005542:	200a      	movs	r0, #10
 8005544:	f001 fc64 	bl	8006e10 <USBH_Delay>
      break;
 8005548:	e15b      	b.n	8005802 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800555a:	2104      	movs	r1, #4
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005560:	2064      	movs	r0, #100	; 0x64
 8005562:	f001 fc55 	bl	8006e10 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f001 fb24 	bl	8006bb4 <USBH_LL_GetSpeed>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2205      	movs	r2, #5
 800557a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800557c:	2100      	movs	r1, #0
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 f92f 	bl	80067e2 <USBH_AllocPipe>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 f927 	bl	80067e2 <USBH_AllocPipe>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	7919      	ldrb	r1, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80055b0:	b292      	uxth	r2, r2
 80055b2:	9202      	str	r2, [sp, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	9201      	str	r2, [sp, #4]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	4603      	mov	r3, r0
 80055bc:	2280      	movs	r2, #128	; 0x80
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f8e0 	bl	8006784 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	7959      	ldrb	r1, [r3, #5]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80055d8:	b292      	uxth	r2, r2
 80055da:	9202      	str	r2, [sp, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	9201      	str	r2, [sp, #4]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	4603      	mov	r3, r0
 80055e4:	2200      	movs	r2, #0
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 f8cc 	bl	8006784 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80055ec:	e109      	b.n	8005802 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f90c 	bl	800580c <USBH_HandleEnum>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 80f3 	bne.w	80057e8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005610:	2b01      	cmp	r3, #1
 8005612:	d103      	bne.n	800561c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2208      	movs	r2, #8
 8005618:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800561a:	e0e5      	b.n	80057e8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2207      	movs	r2, #7
 8005620:	701a      	strb	r2, [r3, #0]
      break;
 8005622:	e0e1      	b.n	80057e8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80de 	beq.w	80057ec <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005636:	2101      	movs	r1, #1
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2208      	movs	r2, #8
 8005640:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005642:	e0d3      	b.n	80057ec <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800564a:	b29b      	uxth	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fc20 	bl	8005e94 <USBH_SetCfg>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	f040 80ca 	bne.w	80057f0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2209      	movs	r2, #9
 8005660:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005662:	e0c5      	b.n	80057f0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005672:	2101      	movs	r1, #1
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fc30 	bl	8005eda <USBH_SetFeature>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	f040 80b9 	bne.w	80057f4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	220a      	movs	r2, #10
 8005686:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005688:	e0b4      	b.n	80057f4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	220a      	movs	r2, #10
 800568e:	701a      	strb	r2, [r3, #0]
      break;
 8005690:	e0b0      	b.n	80057f4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80ad 	beq.w	80057f8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
 80056aa:	e016      	b.n	80056da <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80056ac:	7bfa      	ldrb	r2, [r7, #15]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	32de      	adds	r2, #222	; 0xde
 80056b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b6:	791a      	ldrb	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80056be:	429a      	cmp	r2, r3
 80056c0:	d108      	bne.n	80056d4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	32de      	adds	r2, #222	; 0xde
 80056c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80056d2:	e005      	b.n	80056e0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	3301      	adds	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0e5      	beq.n	80056ac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2206      	movs	r2, #6
 8005700:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005708:	2103      	movs	r1, #3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800570e:	e073      	b.n	80057f8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	220d      	movs	r2, #13
 8005714:	701a      	strb	r2, [r3, #0]
      break;
 8005716:	e06f      	b.n	80057f8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	220d      	movs	r2, #13
 800571c:	701a      	strb	r2, [r3, #0]
      break;
 800571e:	e06b      	b.n	80057f8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d017      	beq.n	800575a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
 8005736:	4603      	mov	r3, r0
 8005738:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800573a:	7bbb      	ldrb	r3, [r7, #14]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	220b      	movs	r2, #11
 8005746:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005748:	e058      	b.n	80057fc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800574a:	7bbb      	ldrb	r3, [r7, #14]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d154      	bne.n	80057fc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	220d      	movs	r2, #13
 8005756:	701a      	strb	r2, [r3, #0]
      break;
 8005758:	e050      	b.n	80057fc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	220d      	movs	r2, #13
 800575e:	701a      	strb	r2, [r3, #0]
      break;
 8005760:	e04c      	b.n	80057fc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d049      	beq.n	8005800 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
      }
      break;
 8005778:	e042      	b.n	8005800 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fd72 	bl	800526c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057b6:	2105      	movs	r1, #5
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fe2b 	bl	800542c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80057d6:	e014      	b.n	8005802 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 f9b5 	bl	8006b48 <USBH_LL_Start>
      break;
 80057de:	e010      	b.n	8005802 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80057e0:	bf00      	nop
 80057e2:	e00e      	b.n	8005802 <USBH_Process+0x3b6>
      break;
 80057e4:	bf00      	nop
 80057e6:	e00c      	b.n	8005802 <USBH_Process+0x3b6>
      break;
 80057e8:	bf00      	nop
 80057ea:	e00a      	b.n	8005802 <USBH_Process+0x3b6>
    break;
 80057ec:	bf00      	nop
 80057ee:	e008      	b.n	8005802 <USBH_Process+0x3b6>
      break;
 80057f0:	bf00      	nop
 80057f2:	e006      	b.n	8005802 <USBH_Process+0x3b6>
      break;
 80057f4:	bf00      	nop
 80057f6:	e004      	b.n	8005802 <USBH_Process+0x3b6>
      break;
 80057f8:	bf00      	nop
 80057fa:	e002      	b.n	8005802 <USBH_Process+0x3b6>
      break;
 80057fc:	bf00      	nop
 80057fe:	e000      	b.n	8005802 <USBH_Process+0x3b6>
      break;
 8005800:	bf00      	nop
  }
  return USBH_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af04      	add	r7, sp, #16
 8005812:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005818:	2301      	movs	r3, #1
 800581a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b07      	cmp	r3, #7
 8005822:	f200 81c1 	bhi.w	8005ba8 <USBH_HandleEnum+0x39c>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USBH_HandleEnum+0x20>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800584d 	.word	0x0800584d
 8005830:	0800590b 	.word	0x0800590b
 8005834:	08005975 	.word	0x08005975
 8005838:	08005a03 	.word	0x08005a03
 800583c:	08005a6d 	.word	0x08005a6d
 8005840:	08005add 	.word	0x08005add
 8005844:	08005b23 	.word	0x08005b23
 8005848:	08005b69 	.word	0x08005b69
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800584c:	2108      	movs	r1, #8
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa50 	bl	8005cf4 <USBH_Get_DevDesc>
 8005854:	4603      	mov	r3, r0
 8005856:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d130      	bne.n	80058c0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7919      	ldrb	r1, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005882:	b292      	uxth	r2, r2
 8005884:	9202      	str	r2, [sp, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	9201      	str	r2, [sp, #4]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4603      	mov	r3, r0
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 ff77 	bl	8006784 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	7959      	ldrb	r1, [r3, #5]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80058aa:	b292      	uxth	r2, r2
 80058ac:	9202      	str	r2, [sp, #8]
 80058ae:	2200      	movs	r2, #0
 80058b0:	9201      	str	r2, [sp, #4]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	4603      	mov	r3, r0
 80058b6:	2200      	movs	r2, #0
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 ff63 	bl	8006784 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80058be:	e175      	b.n	8005bac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	f040 8172 	bne.w	8005bac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80058ce:	3301      	adds	r3, #1
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d903      	bls.n	80058ea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	220d      	movs	r2, #13
 80058e6:	701a      	strb	r2, [r3, #0]
      break;
 80058e8:	e160      	b.n	8005bac <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	795b      	ldrb	r3, [r3, #5]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 ff97 	bl	8006824 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 ff91 	bl	8006824 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
      break;
 8005908:	e150      	b.n	8005bac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800590a:	2112      	movs	r1, #18
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9f1 	bl	8005cf4 <USBH_Get_DevDesc>
 8005912:	4603      	mov	r3, r0
 8005914:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005922:	e145      	b.n	8005bb0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	2b03      	cmp	r3, #3
 8005928:	f040 8142 	bne.w	8005bb0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005932:	3301      	adds	r3, #1
 8005934:	b2da      	uxtb	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005942:	2b03      	cmp	r3, #3
 8005944:	d903      	bls.n	800594e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	220d      	movs	r2, #13
 800594a:	701a      	strb	r2, [r3, #0]
      break;
 800594c:	e130      	b.n	8005bb0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	795b      	ldrb	r3, [r3, #5]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 ff65 	bl	8006824 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	791b      	ldrb	r3, [r3, #4]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 ff5f 	bl	8006824 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
      break;
 8005972:	e11d      	b.n	8005bb0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005974:	2101      	movs	r1, #1
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa68 	bl	8005e4c <USBH_SetAddress>
 800597c:	4603      	mov	r3, r0
 800597e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d132      	bne.n	80059ec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005986:	2002      	movs	r0, #2
 8005988:	f001 fa42 	bl	8006e10 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2203      	movs	r2, #3
 8005998:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	7919      	ldrb	r1, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80059ae:	b292      	uxth	r2, r2
 80059b0:	9202      	str	r2, [sp, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	9201      	str	r2, [sp, #4]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4603      	mov	r3, r0
 80059ba:	2280      	movs	r2, #128	; 0x80
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fee1 	bl	8006784 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	7959      	ldrb	r1, [r3, #5]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80059d6:	b292      	uxth	r2, r2
 80059d8:	9202      	str	r2, [sp, #8]
 80059da:	2200      	movs	r2, #0
 80059dc:	9201      	str	r2, [sp, #4]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4603      	mov	r3, r0
 80059e2:	2200      	movs	r2, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fecd 	bl	8006784 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80059ea:	e0e3      	b.n	8005bb4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	f040 80e0 	bne.w	8005bb4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	220d      	movs	r2, #13
 80059f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	705a      	strb	r2, [r3, #1]
      break;
 8005a00:	e0d8      	b.n	8005bb4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005a02:	2109      	movs	r1, #9
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f99d 	bl	8005d44 <USBH_Get_CfgDesc>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2204      	movs	r2, #4
 8005a18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005a1a:	e0cd      	b.n	8005bb8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	f040 80ca 	bne.w	8005bb8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d903      	bls.n	8005a46 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	220d      	movs	r2, #13
 8005a42:	701a      	strb	r2, [r3, #0]
      break;
 8005a44:	e0b8      	b.n	8005bb8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	795b      	ldrb	r3, [r3, #5]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fee9 	bl	8006824 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	791b      	ldrb	r3, [r3, #4]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fee3 	bl	8006824 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]
      break;
 8005a6a:	e0a5      	b.n	8005bb8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f965 	bl	8005d44 <USBH_Get_CfgDesc>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2205      	movs	r2, #5
 8005a88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005a8a:	e097      	b.n	8005bbc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	f040 8094 	bne.w	8005bbc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d903      	bls.n	8005ab6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	220d      	movs	r2, #13
 8005ab2:	701a      	strb	r2, [r3, #0]
      break;
 8005ab4:	e082      	b.n	8005bbc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	795b      	ldrb	r3, [r3, #5]
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 feb1 	bl	8006824 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 feab 	bl	8006824 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
      break;
 8005ada:	e06f      	b.n	8005bbc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d019      	beq.n	8005b1a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005af2:	23ff      	movs	r3, #255	; 0xff
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f949 	bl	8005d8c <USBH_Get_StringDesc>
 8005afa:	4603      	mov	r3, r0
 8005afc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d103      	bne.n	8005b0c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2206      	movs	r2, #6
 8005b08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005b0a:	e059      	b.n	8005bc0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d156      	bne.n	8005bc0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2206      	movs	r2, #6
 8005b16:	705a      	strb	r2, [r3, #1]
      break;
 8005b18:	e052      	b.n	8005bc0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2206      	movs	r2, #6
 8005b1e:	705a      	strb	r2, [r3, #1]
      break;
 8005b20:	e04e      	b.n	8005bc0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d019      	beq.n	8005b60 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005b38:	23ff      	movs	r3, #255	; 0xff
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f926 	bl	8005d8c <USBH_Get_StringDesc>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005b50:	e038      	b.n	8005bc4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d135      	bne.n	8005bc4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2207      	movs	r2, #7
 8005b5c:	705a      	strb	r2, [r3, #1]
      break;
 8005b5e:	e031      	b.n	8005bc4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2207      	movs	r2, #7
 8005b64:	705a      	strb	r2, [r3, #1]
      break;
 8005b66:	e02d      	b.n	8005bc4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d017      	beq.n	8005ba2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005b7e:	23ff      	movs	r3, #255	; 0xff
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f903 	bl	8005d8c <USBH_Get_StringDesc>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005b94:	e018      	b.n	8005bc8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d115      	bne.n	8005bc8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e012      	b.n	8005bc8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba6:	e00f      	b.n	8005bc8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005ba8:	bf00      	nop
 8005baa:	e00e      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bac:	bf00      	nop
 8005bae:	e00c      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bb0:	bf00      	nop
 8005bb2:	e00a      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bb4:	bf00      	nop
 8005bb6:	e008      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bb8:	bf00      	nop
 8005bba:	e006      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bbc:	bf00      	nop
 8005bbe:	e004      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bc0:	bf00      	nop
 8005bc2:	e002      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bc4:	bf00      	nop
 8005bc6:	e000      	b.n	8005bca <USBH_HandleEnum+0x3be>
      break;
 8005bc8:	bf00      	nop
  }
  return Status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f804 	bl	8005c16 <USBH_HandleSof>
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b0b      	cmp	r3, #11
 8005c26:	d10a      	bne.n	8005c3e <USBH_HandleSof+0x28>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	4798      	blx	r3
  }
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005c56:	bf00      	nop
}
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005c72:	bf00      	nop
}
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 ff56 	bl	8006b7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	791b      	ldrb	r3, [r3, #4]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fda3 	bl	8006824 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	795b      	ldrb	r3, [r3, #5]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fd9d 	bl	8006824 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d12:	2100      	movs	r1, #0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f864 	bl	8005de2 <USBH_GetDescriptor>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f203 3026 	addw	r0, r3, #806	; 0x326
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	b292      	uxth	r2, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	f000 f918 	bl	8005f6a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	331c      	adds	r3, #28
 8005d54:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005d56:	887b      	ldrh	r3, [r7, #2]
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d60:	2100      	movs	r1, #0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f83d 	bl	8005de2 <USBH_GetDescriptor>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	72fb      	strb	r3, [r7, #11]
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d107      	bne.n	8005d82 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d78:	887a      	ldrh	r2, [r7, #2]
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 f964 	bl	800604a <USBH_ParseCfgDesc>
  }

  return status;
 8005d82:	7afb      	ldrb	r3, [r7, #11]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	461a      	mov	r2, r3
 8005d98:	460b      	mov	r3, r1
 8005d9a:	72fb      	strb	r3, [r7, #11]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8005da0:	7afb      	ldrb	r3, [r7, #11]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005da8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005db0:	893b      	ldrh	r3, [r7, #8]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	460b      	mov	r3, r1
 8005db6:	2100      	movs	r1, #0
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f812 	bl	8005de2 <USBH_GetDescriptor>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	75fb      	strb	r3, [r7, #23]
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005dce:	893a      	ldrh	r2, [r7, #8]
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa37 	bl	8006246 <USBH_ParseStringDesc>
  }

  return status;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	72fb      	strb	r3, [r7, #11]
 8005df0:	4613      	mov	r3, r2
 8005df2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	789b      	ldrb	r3, [r3, #2]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d11c      	bne.n	8005e36 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2206      	movs	r2, #6
 8005e0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	893a      	ldrh	r2, [r7, #8]
 8005e12:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e1e:	d104      	bne.n	8005e2a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f240 4209 	movw	r2, #1033	; 0x409
 8005e26:	829a      	strh	r2, [r3, #20]
 8005e28:	e002      	b.n	8005e30 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8b3a      	ldrh	r2, [r7, #24]
 8005e34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005e36:	8b3b      	ldrh	r3, [r7, #24]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fa50 	bl	80062e2 <USBH_CtlReq>
 8005e42:	4603      	mov	r3, r0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	789b      	ldrb	r3, [r3, #2]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10f      	bne.n	8005e80 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2205      	movs	r2, #5
 8005e6a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005e80:	2200      	movs	r2, #0
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fa2c 	bl	80062e2 <USBH_CtlReq>
 8005e8a:	4603      	mov	r3, r0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	789b      	ldrb	r3, [r3, #2]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d10e      	bne.n	8005ec6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2209      	movs	r2, #9
 8005eb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	887a      	ldrh	r2, [r7, #2]
 8005eb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2100      	movs	r1, #0
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa09 	bl	80062e2 <USBH_CtlReq>
 8005ed0:	4603      	mov	r3, r0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	789b      	ldrb	r3, [r3, #2]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d10f      	bne.n	8005f0e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2203      	movs	r2, #3
 8005ef8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2100      	movs	r1, #0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9e5 	bl	80062e2 <USBH_CtlReq>
 8005f18:	4603      	mov	r3, r0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	789b      	ldrb	r3, [r3, #2]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10f      	bne.n	8005f56 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005f56:	2200      	movs	r2, #0
 8005f58:	2100      	movs	r1, #0
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9c1 	bl	80062e2 <USBH_CtlReq>
 8005f60:	4603      	mov	r3, r0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	785a      	ldrb	r2, [r3, #1]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	3303      	adds	r3, #3
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	791a      	ldrb	r2, [r3, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	795a      	ldrb	r2, [r3, #5]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	799a      	ldrb	r2, [r3, #6]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	79da      	ldrb	r2, [r3, #7]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d939      	bls.n	800603e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3309      	adds	r3, #9
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	330a      	adds	r3, #10
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	330b      	adds	r3, #11
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	330c      	adds	r3, #12
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b29a      	uxth	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	330d      	adds	r3, #13
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	b29b      	uxth	r3, r3
 8006016:	4313      	orrs	r3, r2
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	7b9a      	ldrb	r2, [r3, #14]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	7bda      	ldrb	r2, [r3, #15]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	7c1a      	ldrb	r2, [r3, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7c5a      	ldrb	r2, [r3, #17]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	745a      	strb	r2, [r3, #17]
  }
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b08a      	sub	sp, #40	; 0x28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	4613      	mov	r3, r2
 8006056:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	785a      	ldrb	r2, [r3, #1]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	3302      	adds	r3, #2
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b29a      	uxth	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3303      	adds	r3, #3
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	b29b      	uxth	r3, r3
 8006090:	4313      	orrs	r3, r2
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	791a      	ldrb	r2, [r3, #4]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	795a      	ldrb	r2, [r3, #5]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	799a      	ldrb	r2, [r3, #6]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	79da      	ldrb	r2, [r3, #7]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	7a1a      	ldrb	r2, [r3, #8]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	d95f      	bls.n	8006186 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80060c6:	2309      	movs	r3, #9
 80060c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80060ce:	e051      	b.n	8006174 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80060d0:	f107 0316 	add.w	r3, r7, #22
 80060d4:	4619      	mov	r1, r3
 80060d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060d8:	f000 f8e8 	bl	80062ac <USBH_GetNextDesc>
 80060dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d146      	bne.n	8006174 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80060e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ea:	221a      	movs	r2, #26
 80060ec:	fb02 f303 	mul.w	r3, r2, r3
 80060f0:	3308      	adds	r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	3302      	adds	r3, #2
 80060f8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80060fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060fc:	69f8      	ldr	r0, [r7, #28]
 80060fe:	f000 f846 	bl	800618e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800610c:	e022      	b.n	8006154 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800610e:	f107 0316 	add.w	r3, r7, #22
 8006112:	4619      	mov	r1, r3
 8006114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006116:	f000 f8c9 	bl	80062ac <USBH_GetNextDesc>
 800611a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b05      	cmp	r3, #5
 8006122:	d117      	bne.n	8006154 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006128:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800612c:	3201      	adds	r2, #1
 800612e:	00d2      	lsls	r2, r2, #3
 8006130:	211a      	movs	r1, #26
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	4413      	add	r3, r2
 8006138:	3308      	adds	r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	3304      	adds	r3, #4
 8006140:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006144:	69b8      	ldr	r0, [r7, #24]
 8006146:	f000 f851 	bl	80061ec <USBH_ParseEPDesc>
            ep_ix++;
 800614a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800614e:	3301      	adds	r3, #1
 8006150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	791b      	ldrb	r3, [r3, #4]
 8006158:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800615c:	429a      	cmp	r2, r3
 800615e:	d204      	bcs.n	800616a <USBH_ParseCfgDesc+0x120>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	885a      	ldrh	r2, [r3, #2]
 8006164:	8afb      	ldrh	r3, [r7, #22]
 8006166:	429a      	cmp	r2, r3
 8006168:	d8d1      	bhi.n	800610e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800616a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800616e:	3301      	adds	r3, #1
 8006170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006178:	2b01      	cmp	r3, #1
 800617a:	d804      	bhi.n	8006186 <USBH_ParseCfgDesc+0x13c>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	885a      	ldrh	r2, [r3, #2]
 8006180:	8afb      	ldrh	r3, [r7, #22]
 8006182:	429a      	cmp	r2, r3
 8006184:	d8a4      	bhi.n	80060d0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006186:	bf00      	nop
 8006188:	3728      	adds	r7, #40	; 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	785a      	ldrb	r2, [r3, #1]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	789a      	ldrb	r2, [r3, #2]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	78da      	ldrb	r2, [r3, #3]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	791a      	ldrb	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	795a      	ldrb	r2, [r3, #5]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	799a      	ldrb	r2, [r3, #6]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	79da      	ldrb	r2, [r3, #7]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	7a1a      	ldrb	r2, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	721a      	strb	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	785a      	ldrb	r2, [r3, #1]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	789a      	ldrb	r2, [r3, #2]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	78da      	ldrb	r2, [r3, #3]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	3304      	adds	r3, #4
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	b29a      	uxth	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	3305      	adds	r3, #5
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	b29b      	uxth	r3, r3
 800622a:	4313      	orrs	r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	799a      	ldrb	r2, [r3, #6]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	719a      	strb	r2, [r3, #6]
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006246:	b480      	push	{r7}
 8006248:	b087      	sub	sp, #28
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	4613      	mov	r3, r2
 8006252:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b03      	cmp	r3, #3
 800625c:	d120      	bne.n	80062a0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	1e9a      	subs	r2, r3, #2
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	4293      	cmp	r3, r2
 8006268:	bf28      	it	cs
 800626a:	4613      	movcs	r3, r2
 800626c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3302      	adds	r3, #2
 8006272:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006274:	2300      	movs	r3, #0
 8006276:	82fb      	strh	r3, [r7, #22]
 8006278:	e00b      	b.n	8006292 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800627a:	8afb      	ldrh	r3, [r7, #22]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	3301      	adds	r3, #1
 800628a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800628c:	8afb      	ldrh	r3, [r7, #22]
 800628e:	3302      	adds	r3, #2
 8006290:	82fb      	strh	r3, [r7, #22]
 8006292:	8afa      	ldrh	r2, [r7, #22]
 8006294:	8abb      	ldrh	r3, [r7, #20]
 8006296:	429a      	cmp	r2, r3
 8006298:	d3ef      	bcc.n	800627a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
  }
}
 80062a0:	bf00      	nop
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	881a      	ldrh	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4413      	add	r3, r2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	4613      	mov	r3, r2
 80062ee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	789b      	ldrb	r3, [r3, #2]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d002      	beq.n	8006302 <USBH_CtlReq+0x20>
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d00f      	beq.n	8006320 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006300:	e027      	b.n	8006352 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	88fa      	ldrh	r2, [r7, #6]
 800630c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2202      	movs	r2, #2
 8006318:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
      break;
 800631e:	e018      	b.n	8006352 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f81b 	bl	800635c <USBH_HandleControl>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <USBH_CtlReq+0x54>
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d106      	bne.n	8006344 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	761a      	strb	r2, [r3, #24]
      break;
 8006342:	e005      	b.n	8006350 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d102      	bne.n	8006350 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	709a      	strb	r2, [r3, #2]
      break;
 8006350:	bf00      	nop
  }
  return status;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af02      	add	r7, sp, #8
 8006362:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006368:	2300      	movs	r3, #0
 800636a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7e1b      	ldrb	r3, [r3, #24]
 8006370:	3b01      	subs	r3, #1
 8006372:	2b0a      	cmp	r3, #10
 8006374:	f200 8156 	bhi.w	8006624 <USBH_HandleControl+0x2c8>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBH_HandleControl+0x24>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	080063ad 	.word	0x080063ad
 8006384:	080063c7 	.word	0x080063c7
 8006388:	08006431 	.word	0x08006431
 800638c:	08006457 	.word	0x08006457
 8006390:	0800648f 	.word	0x0800648f
 8006394:	080064b9 	.word	0x080064b9
 8006398:	0800650b 	.word	0x0800650b
 800639c:	0800652d 	.word	0x0800652d
 80063a0:	08006569 	.word	0x08006569
 80063a4:	0800658f 	.word	0x0800658f
 80063a8:	080065cd 	.word	0x080065cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f103 0110 	add.w	r1, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	795b      	ldrb	r3, [r3, #5]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f943 	bl	8006644 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	761a      	strb	r2, [r3, #24]
      break;
 80063c4:	e139      	b.n	800663a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	795b      	ldrb	r3, [r3, #5]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fcc5 	bl	8006d5c <USBH_LL_GetURBState>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d11e      	bne.n	800641a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7c1b      	ldrb	r3, [r3, #16]
 80063e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8adb      	ldrh	r3, [r3, #22]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80063ee:	7b7b      	ldrb	r3, [r7, #13]
 80063f0:	2b80      	cmp	r3, #128	; 0x80
 80063f2:	d103      	bne.n	80063fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2203      	movs	r2, #3
 80063f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80063fa:	e115      	b.n	8006628 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2205      	movs	r2, #5
 8006400:	761a      	strb	r2, [r3, #24]
      break;
 8006402:	e111      	b.n	8006628 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006404:	7b7b      	ldrb	r3, [r7, #13]
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d103      	bne.n	8006412 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2209      	movs	r2, #9
 800640e:	761a      	strb	r2, [r3, #24]
      break;
 8006410:	e10a      	b.n	8006628 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2207      	movs	r2, #7
 8006416:	761a      	strb	r2, [r3, #24]
      break;
 8006418:	e106      	b.n	8006628 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d003      	beq.n	8006428 <USBH_HandleControl+0xcc>
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b02      	cmp	r3, #2
 8006424:	f040 8100 	bne.w	8006628 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	220b      	movs	r2, #11
 800642c:	761a      	strb	r2, [r3, #24]
      break;
 800642e:	e0fb      	b.n	8006628 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6899      	ldr	r1, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	899a      	ldrh	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	791b      	ldrb	r3, [r3, #4]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f93a 	bl	80066c2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2204      	movs	r2, #4
 8006452:	761a      	strb	r2, [r3, #24]
      break;
 8006454:	e0f1      	b.n	800663a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	791b      	ldrb	r3, [r3, #4]
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fc7d 	bl	8006d5c <USBH_LL_GetURBState>
 8006462:	4603      	mov	r3, r0
 8006464:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d102      	bne.n	8006472 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2209      	movs	r2, #9
 8006470:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b05      	cmp	r3, #5
 8006476:	d102      	bne.n	800647e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006478:	2303      	movs	r3, #3
 800647a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800647c:	e0d6      	b.n	800662c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b04      	cmp	r3, #4
 8006482:	f040 80d3 	bne.w	800662c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	220b      	movs	r2, #11
 800648a:	761a      	strb	r2, [r3, #24]
      break;
 800648c:	e0ce      	b.n	800662c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6899      	ldr	r1, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	899a      	ldrh	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	795b      	ldrb	r3, [r3, #5]
 800649a:	2001      	movs	r0, #1
 800649c:	9000      	str	r0, [sp, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8ea 	bl	8006678 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2206      	movs	r2, #6
 80064b4:	761a      	strb	r2, [r3, #24]
      break;
 80064b6:	e0c0      	b.n	800663a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	795b      	ldrb	r3, [r3, #5]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fc4c 	bl	8006d5c <USBH_LL_GetURBState>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d103      	bne.n	80064d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2207      	movs	r2, #7
 80064d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80064d4:	e0ac      	b.n	8006630 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	2b05      	cmp	r3, #5
 80064da:	d105      	bne.n	80064e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	220c      	movs	r2, #12
 80064e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80064e2:	2303      	movs	r3, #3
 80064e4:	73fb      	strb	r3, [r7, #15]
      break;
 80064e6:	e0a3      	b.n	8006630 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d103      	bne.n	80064f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2205      	movs	r2, #5
 80064f2:	761a      	strb	r2, [r3, #24]
      break;
 80064f4:	e09c      	b.n	8006630 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	f040 8099 	bne.w	8006630 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	220b      	movs	r2, #11
 8006502:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006504:	2302      	movs	r3, #2
 8006506:	73fb      	strb	r3, [r7, #15]
      break;
 8006508:	e092      	b.n	8006630 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	791b      	ldrb	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	2100      	movs	r1, #0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8d5 	bl	80066c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2208      	movs	r2, #8
 8006528:	761a      	strb	r2, [r3, #24]

      break;
 800652a:	e086      	b.n	800663a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	791b      	ldrb	r3, [r3, #4]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fc12 	bl	8006d5c <USBH_LL_GetURBState>
 8006538:	4603      	mov	r3, r0
 800653a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d105      	bne.n	800654e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	220d      	movs	r2, #13
 8006546:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800654c:	e072      	b.n	8006634 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d103      	bne.n	800655c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	220b      	movs	r2, #11
 8006558:	761a      	strb	r2, [r3, #24]
      break;
 800655a:	e06b      	b.n	8006634 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b05      	cmp	r3, #5
 8006560:	d168      	bne.n	8006634 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006562:	2303      	movs	r3, #3
 8006564:	73fb      	strb	r3, [r7, #15]
      break;
 8006566:	e065      	b.n	8006634 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	795b      	ldrb	r3, [r3, #5]
 800656c:	2201      	movs	r2, #1
 800656e:	9200      	str	r2, [sp, #0]
 8006570:	2200      	movs	r2, #0
 8006572:	2100      	movs	r1, #0
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f87f 	bl	8006678 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	220a      	movs	r2, #10
 800658a:	761a      	strb	r2, [r3, #24]
      break;
 800658c:	e055      	b.n	800663a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	795b      	ldrb	r3, [r3, #5]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fbe1 	bl	8006d5c <USBH_LL_GetURBState>
 800659a:	4603      	mov	r3, r0
 800659c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	220d      	movs	r2, #13
 80065ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80065ae:	e043      	b.n	8006638 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d103      	bne.n	80065be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2209      	movs	r2, #9
 80065ba:	761a      	strb	r2, [r3, #24]
      break;
 80065bc:	e03c      	b.n	8006638 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d139      	bne.n	8006638 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	220b      	movs	r2, #11
 80065c8:	761a      	strb	r2, [r3, #24]
      break;
 80065ca:	e035      	b.n	8006638 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	7e5b      	ldrb	r3, [r3, #25]
 80065d0:	3301      	adds	r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	765a      	strb	r2, [r3, #25]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7e5b      	ldrb	r3, [r3, #25]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d806      	bhi.n	80065ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80065ec:	e025      	b.n	800663a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065f4:	2106      	movs	r1, #6
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	795b      	ldrb	r3, [r3, #5]
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f90c 	bl	8006824 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	791b      	ldrb	r3, [r3, #4]
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f906 	bl	8006824 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800661e:	2302      	movs	r3, #2
 8006620:	73fb      	strb	r3, [r7, #15]
      break;
 8006622:	e00a      	b.n	800663a <USBH_HandleControl+0x2de>

    default:
      break;
 8006624:	bf00      	nop
 8006626:	e008      	b.n	800663a <USBH_HandleControl+0x2de>
      break;
 8006628:	bf00      	nop
 800662a:	e006      	b.n	800663a <USBH_HandleControl+0x2de>
      break;
 800662c:	bf00      	nop
 800662e:	e004      	b.n	800663a <USBH_HandleControl+0x2de>
      break;
 8006630:	bf00      	nop
 8006632:	e002      	b.n	800663a <USBH_HandleControl+0x2de>
      break;
 8006634:	bf00      	nop
 8006636:	e000      	b.n	800663a <USBH_HandleControl+0x2de>
      break;
 8006638:	bf00      	nop
  }

  return status;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af04      	add	r7, sp, #16
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006652:	79f9      	ldrb	r1, [r7, #7]
 8006654:	2300      	movs	r3, #0
 8006656:	9303      	str	r3, [sp, #12]
 8006658:	2308      	movs	r3, #8
 800665a:	9302      	str	r3, [sp, #8]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	2300      	movs	r3, #0
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	2200      	movs	r2, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fb46 	bl	8006cfa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af04      	add	r7, sp, #16
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4611      	mov	r1, r2
 8006684:	461a      	mov	r2, r3
 8006686:	460b      	mov	r3, r1
 8006688:	80fb      	strh	r3, [r7, #6]
 800668a:	4613      	mov	r3, r2
 800668c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800669c:	7979      	ldrb	r1, [r7, #5]
 800669e:	7e3b      	ldrb	r3, [r7, #24]
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	2301      	movs	r3, #1
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	2300      	movs	r3, #0
 80066b0:	2200      	movs	r2, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fb21 	bl	8006cfa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b088      	sub	sp, #32
 80066c6:	af04      	add	r7, sp, #16
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	4611      	mov	r1, r2
 80066ce:	461a      	mov	r2, r3
 80066d0:	460b      	mov	r3, r1
 80066d2:	80fb      	strh	r3, [r7, #6]
 80066d4:	4613      	mov	r3, r2
 80066d6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80066d8:	7979      	ldrb	r1, [r7, #5]
 80066da:	2300      	movs	r3, #0
 80066dc:	9303      	str	r3, [sp, #12]
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	9302      	str	r3, [sp, #8]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	2301      	movs	r3, #1
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	2201      	movs	r2, #1
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fb03 	bl	8006cfa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80066f4:	2300      	movs	r3, #0

}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b088      	sub	sp, #32
 8006702:	af04      	add	r7, sp, #16
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	4611      	mov	r1, r2
 800670a:	461a      	mov	r2, r3
 800670c:	460b      	mov	r3, r1
 800670e:	80fb      	strh	r3, [r7, #6]
 8006710:	4613      	mov	r3, r2
 8006712:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006722:	7979      	ldrb	r1, [r7, #5]
 8006724:	7e3b      	ldrb	r3, [r7, #24]
 8006726:	9303      	str	r3, [sp, #12]
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	2301      	movs	r3, #1
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2302      	movs	r3, #2
 8006736:	2200      	movs	r2, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fade 	bl	8006cfa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af04      	add	r7, sp, #16
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4611      	mov	r1, r2
 8006754:	461a      	mov	r2, r3
 8006756:	460b      	mov	r3, r1
 8006758:	80fb      	strh	r3, [r7, #6]
 800675a:	4613      	mov	r3, r2
 800675c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800675e:	7979      	ldrb	r1, [r7, #5]
 8006760:	2300      	movs	r3, #0
 8006762:	9303      	str	r3, [sp, #12]
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	9302      	str	r3, [sp, #8]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	2301      	movs	r3, #1
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2302      	movs	r3, #2
 8006772:	2201      	movs	r2, #1
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fac0 	bl	8006cfa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af04      	add	r7, sp, #16
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	4603      	mov	r3, r0
 8006794:	70fb      	strb	r3, [r7, #3]
 8006796:	460b      	mov	r3, r1
 8006798:	70bb      	strb	r3, [r7, #2]
 800679a:	4613      	mov	r3, r2
 800679c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800679e:	7878      	ldrb	r0, [r7, #1]
 80067a0:	78ba      	ldrb	r2, [r7, #2]
 80067a2:	78f9      	ldrb	r1, [r7, #3]
 80067a4:	8b3b      	ldrh	r3, [r7, #24]
 80067a6:	9302      	str	r3, [sp, #8]
 80067a8:	7d3b      	ldrb	r3, [r7, #20]
 80067aa:	9301      	str	r3, [sp, #4]
 80067ac:	7c3b      	ldrb	r3, [r7, #16]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4603      	mov	r3, r0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa53 	bl	8006c5e <USBH_LL_OpenPipe>

  return USBH_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa72 	bl	8006cbc <USBH_LL_ClosePipe>

  return USBH_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f836 	bl	8006860 <USBH_GetFreePipe>
 80067f4:	4603      	mov	r3, r0
 80067f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80067f8:	89fb      	ldrh	r3, [r7, #14]
 80067fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00a      	beq.n	8006818 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	89fb      	ldrh	r3, [r7, #14]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	33e0      	adds	r3, #224	; 0xe0
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	b2db      	uxtb	r3, r3
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	2b0a      	cmp	r3, #10
 8006834:	d80d      	bhi.n	8006852 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	33e0      	adds	r3, #224	; 0xe0
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	33e0      	adds	r3, #224	; 0xe0
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	440b      	add	r3, r1
 8006850:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
 8006870:	e00f      	b.n	8006892 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	33e0      	adds	r3, #224	; 0xe0
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	b29b      	uxth	r3, r3
 800688a:	e007      	b.n	800689c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	3301      	adds	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b0a      	cmp	r3, #10
 8006896:	d9ec      	bls.n	8006872 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006898:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80068ac:	2201      	movs	r2, #1
 80068ae:	490e      	ldr	r1, [pc, #56]	; (80068e8 <MX_USB_HOST_Init+0x40>)
 80068b0:	480e      	ldr	r0, [pc, #56]	; (80068ec <MX_USB_HOST_Init+0x44>)
 80068b2:	f7fe fca1 	bl	80051f8 <USBH_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80068bc:	f7fa f8b8 	bl	8000a30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80068c0:	490b      	ldr	r1, [pc, #44]	; (80068f0 <MX_USB_HOST_Init+0x48>)
 80068c2:	480a      	ldr	r0, [pc, #40]	; (80068ec <MX_USB_HOST_Init+0x44>)
 80068c4:	f7fe fd26 	bl	8005314 <USBH_RegisterClass>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80068ce:	f7fa f8af 	bl	8000a30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80068d2:	4806      	ldr	r0, [pc, #24]	; (80068ec <MX_USB_HOST_Init+0x44>)
 80068d4:	f7fe fdaa 	bl	800542c <USBH_Start>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80068de:	f7fa f8a7 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80068e2:	bf00      	nop
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	08006909 	.word	0x08006909
 80068ec:	2000016c 	.word	0x2000016c
 80068f0:	2000000c 	.word	0x2000000c

080068f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80068f8:	4802      	ldr	r0, [pc, #8]	; (8006904 <MX_USB_HOST_Process+0x10>)
 80068fa:	f7fe fda7 	bl	800544c <USBH_Process>
}
 80068fe:	bf00      	nop
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	2000016c 	.word	0x2000016c

08006908 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	3b01      	subs	r3, #1
 8006918:	2b04      	cmp	r3, #4
 800691a:	d819      	bhi.n	8006950 <USBH_UserProcess+0x48>
 800691c:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <USBH_UserProcess+0x1c>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	08006951 	.word	0x08006951
 8006928:	08006941 	.word	0x08006941
 800692c:	08006951 	.word	0x08006951
 8006930:	08006949 	.word	0x08006949
 8006934:	08006939 	.word	0x08006939
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006938:	4b09      	ldr	r3, [pc, #36]	; (8006960 <USBH_UserProcess+0x58>)
 800693a:	2203      	movs	r2, #3
 800693c:	701a      	strb	r2, [r3, #0]
  break;
 800693e:	e008      	b.n	8006952 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006940:	4b07      	ldr	r3, [pc, #28]	; (8006960 <USBH_UserProcess+0x58>)
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
  break;
 8006946:	e004      	b.n	8006952 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006948:	4b05      	ldr	r3, [pc, #20]	; (8006960 <USBH_UserProcess+0x58>)
 800694a:	2201      	movs	r2, #1
 800694c:	701a      	strb	r2, [r3, #0]
  break;
 800694e:	e000      	b.n	8006952 <USBH_UserProcess+0x4a>

  default:
  break;
 8006950:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	200000b0 	.word	0x200000b0

08006964 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	605a      	str	r2, [r3, #4]
 8006976:	609a      	str	r2, [r3, #8]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006984:	d147      	bne.n	8006a16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006986:	2300      	movs	r3, #0
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	4b25      	ldr	r3, [pc, #148]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	4a24      	ldr	r2, [pc, #144]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	6313      	str	r3, [r2, #48]	; 0x30
 8006996:	4b22      	ldr	r3, [pc, #136]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80069a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	4619      	mov	r1, r3
 80069b6:	481b      	ldr	r0, [pc, #108]	; (8006a24 <HAL_HCD_MspInit+0xc0>)
 80069b8:	f7fa fb46 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80069bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80069c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c2:	2302      	movs	r3, #2
 80069c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ca:	2300      	movs	r3, #0
 80069cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069ce:	230a      	movs	r3, #10
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069d2:	f107 0314 	add.w	r3, r7, #20
 80069d6:	4619      	mov	r1, r3
 80069d8:	4812      	ldr	r0, [pc, #72]	; (8006a24 <HAL_HCD_MspInit+0xc0>)
 80069da:	f7fa fb35 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069de:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 80069e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e8:	6353      	str	r3, [r2, #52]	; 0x34
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	4a0b      	ldr	r2, [pc, #44]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 80069f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069f8:	6453      	str	r3, [r2, #68]	; 0x44
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <HAL_HCD_MspInit+0xbc>)
 80069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a06:	2200      	movs	r2, #0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	2043      	movs	r0, #67	; 0x43
 8006a0c:	f7fa fae5 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a10:	2043      	movs	r0, #67	; 0x43
 8006a12:	f7fa fafe 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a16:	bf00      	nop
 8006a18:	3728      	adds	r7, #40	; 0x28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40023800 	.word	0x40023800
 8006a24:	40020000 	.word	0x40020000

08006a28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff f8db 	bl	8005bf2 <USBH_LL_IncTimer>
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff f913 	bl	8005c7e <USBH_LL_Connect>
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff f91c 	bl	8005cac <USBH_LL_Disconnect>
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff f8cd 	bl	8005c46 <USBH_LL_PortEnabled>
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff f8cd 	bl	8005c62 <USBH_LL_PortDisabled>
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d12a      	bne.n	8006b38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006ae2:	4a18      	ldr	r2, [pc, #96]	; (8006b44 <USBH_LL_Init+0x74>)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a15      	ldr	r2, [pc, #84]	; (8006b44 <USBH_LL_Init+0x74>)
 8006aee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006af2:	4b14      	ldr	r3, [pc, #80]	; (8006b44 <USBH_LL_Init+0x74>)
 8006af4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006af8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <USBH_LL_Init+0x74>)
 8006afc:	2208      	movs	r2, #8
 8006afe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <USBH_LL_Init+0x74>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b06:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <USBH_LL_Init+0x74>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <USBH_LL_Init+0x74>)
 8006b0e:	2202      	movs	r2, #2
 8006b10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b12:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <USBH_LL_Init+0x74>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006b18:	480a      	ldr	r0, [pc, #40]	; (8006b44 <USBH_LL_Init+0x74>)
 8006b1a:	f7fa fc7c 	bl	8001416 <HAL_HCD_Init>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006b24:	f7f9 ff84 	bl	8000a30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006b28:	4806      	ldr	r0, [pc, #24]	; (8006b44 <USBH_LL_Init+0x74>)
 8006b2a:	f7fb f860 	bl	8001bee <HAL_HCD_GetCurrentFrame>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff f84e 	bl	8005bd4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000544 	.word	0x20000544

08006b48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fa ffcf 	bl	8001b02 <HAL_HCD_Start>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 f95c 	bl	8006e28 <USBH_Get_USB_Status>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fa ffd7 	bl	8001b48 <HAL_HCD_Stop>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 f941 	bl	8006e28 <USBH_Get_USB_Status>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fb f81f 	bl	8001c0a <HAL_HCD_GetCurrentSpeed>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d00c      	beq.n	8006bec <USBH_LL_GetSpeed+0x38>
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d80d      	bhi.n	8006bf2 <USBH_LL_GetSpeed+0x3e>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <USBH_LL_GetSpeed+0x2c>
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d003      	beq.n	8006be6 <USBH_LL_GetSpeed+0x32>
 8006bde:	e008      	b.n	8006bf2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
    break;
 8006be4:	e008      	b.n	8006bf8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
    break;
 8006bea:	e005      	b.n	8006bf8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006bec:	2302      	movs	r3, #2
 8006bee:	73fb      	strb	r3, [r7, #15]
    break;
 8006bf0:	e002      	b.n	8006bf8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8006bf6:	bf00      	nop
  }
  return  speed;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fa ffb2 	bl	8001b82 <HAL_HCD_ResetPort>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f8ff 	bl	8006e28 <USBH_Get_USB_Status>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fa ffb9 	bl	8001bc6 <HAL_HCD_HC_GetXferCount>
 8006c54:	4603      	mov	r3, r0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006c5e:	b590      	push	{r4, r7, lr}
 8006c60:	b089      	sub	sp, #36	; 0x24
 8006c62:	af04      	add	r7, sp, #16
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	4608      	mov	r0, r1
 8006c68:	4611      	mov	r1, r2
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	70fb      	strb	r3, [r7, #3]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70bb      	strb	r3, [r7, #2]
 8006c74:	4613      	mov	r3, r2
 8006c76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006c86:	787c      	ldrb	r4, [r7, #1]
 8006c88:	78ba      	ldrb	r2, [r7, #2]
 8006c8a:	78f9      	ldrb	r1, [r7, #3]
 8006c8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c8e:	9302      	str	r3, [sp, #8]
 8006c90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	f7fa fc1c 	bl	80014da <HAL_HCD_HC_Init>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 f8bd 	bl	8006e28 <USBH_Get_USB_Status>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd90      	pop	{r4, r7, pc}

08006cbc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fa fc8c 	bl	80015f8 <HAL_HCD_HC_Halt>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 f89e 	bl	8006e28 <USBH_Get_USB_Status>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006cfa:	b590      	push	{r4, r7, lr}
 8006cfc:	b089      	sub	sp, #36	; 0x24
 8006cfe:	af04      	add	r7, sp, #16
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	4608      	mov	r0, r1
 8006d04:	4611      	mov	r1, r2
 8006d06:	461a      	mov	r2, r3
 8006d08:	4603      	mov	r3, r0
 8006d0a:	70fb      	strb	r3, [r7, #3]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70bb      	strb	r3, [r7, #2]
 8006d10:	4613      	mov	r3, r2
 8006d12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006d22:	787c      	ldrb	r4, [r7, #1]
 8006d24:	78ba      	ldrb	r2, [r7, #2]
 8006d26:	78f9      	ldrb	r1, [r7, #3]
 8006d28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d30:	9302      	str	r3, [sp, #8]
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	f7fa fc7f 	bl	8001640 <HAL_HCD_HC_SubmitRequest>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 f86d 	bl	8006e28 <USBH_Get_USB_Status>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd90      	pop	{r4, r7, pc}

08006d5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa ff13 	bl	8001b9e <HAL_HCD_HC_GetURBState>
 8006d78:	4603      	mov	r3, r0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d103      	bne.n	8006da0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f870 	bl	8006e80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006da0:	20c8      	movs	r0, #200	; 0xc8
 8006da2:	f7fa f81b 	bl	8000ddc <HAL_Delay>
  return USBH_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006dc6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	212c      	movs	r1, #44	; 0x2c
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	333b      	adds	r3, #59	; 0x3b
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	212c      	movs	r1, #44	; 0x2c
 8006de2:	fb01 f303 	mul.w	r3, r1, r3
 8006de6:	4413      	add	r3, r2
 8006de8:	3354      	adds	r3, #84	; 0x54
 8006dea:	78ba      	ldrb	r2, [r7, #2]
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e008      	b.n	8006e02 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	212c      	movs	r1, #44	; 0x2c
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3355      	adds	r3, #85	; 0x55
 8006dfe:	78ba      	ldrb	r2, [r7, #2]
 8006e00:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7f9 ffdf 	bl	8000ddc <HAL_Delay>
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d817      	bhi.n	8006e6c <USBH_Get_USB_Status+0x44>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <USBH_Get_USB_Status+0x1c>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e5b 	.word	0x08006e5b
 8006e4c:	08006e61 	.word	0x08006e61
 8006e50:	08006e67 	.word	0x08006e67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
    break;
 8006e58:	e00b      	b.n	8006e72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e5e:	e008      	b.n	8006e72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006e60:	2301      	movs	r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]
    break;
 8006e64:	e005      	b.n	8006e72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	73fb      	strb	r3, [r7, #15]
    break;
 8006e6a:	e002      	b.n	8006e72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e70:	bf00      	nop
  }
  return usb_status;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006e8e:	79fb      	ldrb	r3, [r7, #7]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
 8006e98:	e001      	b.n	8006e9e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	4803      	ldr	r0, [pc, #12]	; (8006eb4 <MX_DriverVbusFS+0x34>)
 8006ea6:	f7fa fa83 	bl	80013b0 <HAL_GPIO_WritePin>
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40020800 	.word	0x40020800

08006eb8 <__errno>:
 8006eb8:	4b01      	ldr	r3, [pc, #4]	; (8006ec0 <__errno+0x8>)
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	2000002c 	.word	0x2000002c

08006ec4 <__libc_init_array>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4d0d      	ldr	r5, [pc, #52]	; (8006efc <__libc_init_array+0x38>)
 8006ec8:	4c0d      	ldr	r4, [pc, #52]	; (8006f00 <__libc_init_array+0x3c>)
 8006eca:	1b64      	subs	r4, r4, r5
 8006ecc:	10a4      	asrs	r4, r4, #2
 8006ece:	2600      	movs	r6, #0
 8006ed0:	42a6      	cmp	r6, r4
 8006ed2:	d109      	bne.n	8006ee8 <__libc_init_array+0x24>
 8006ed4:	4d0b      	ldr	r5, [pc, #44]	; (8006f04 <__libc_init_array+0x40>)
 8006ed6:	4c0c      	ldr	r4, [pc, #48]	; (8006f08 <__libc_init_array+0x44>)
 8006ed8:	f000 f8f8 	bl	80070cc <_init>
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	42a6      	cmp	r6, r4
 8006ee4:	d105      	bne.n	8006ef2 <__libc_init_array+0x2e>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eec:	4798      	blx	r3
 8006eee:	3601      	adds	r6, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__libc_init_array+0xc>
 8006ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef6:	4798      	blx	r3
 8006ef8:	3601      	adds	r6, #1
 8006efa:	e7f2      	b.n	8006ee2 <__libc_init_array+0x1e>
 8006efc:	08007108 	.word	0x08007108
 8006f00:	08007108 	.word	0x08007108
 8006f04:	08007108 	.word	0x08007108
 8006f08:	0800710c 	.word	0x0800710c

08006f0c <malloc>:
 8006f0c:	4b02      	ldr	r3, [pc, #8]	; (8006f18 <malloc+0xc>)
 8006f0e:	4601      	mov	r1, r0
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	f000 b863 	b.w	8006fdc <_malloc_r>
 8006f16:	bf00      	nop
 8006f18:	2000002c 	.word	0x2000002c

08006f1c <free>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <free+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f000 b80b 	b.w	8006f3c <_free_r>
 8006f26:	bf00      	nop
 8006f28:	2000002c 	.word	0x2000002c

08006f2c <memset>:
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d100      	bne.n	8006f36 <memset+0xa>
 8006f34:	4770      	bx	lr
 8006f36:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3a:	e7f9      	b.n	8006f30 <memset+0x4>

08006f3c <_free_r>:
 8006f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f3e:	2900      	cmp	r1, #0
 8006f40:	d048      	beq.n	8006fd4 <_free_r+0x98>
 8006f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f46:	9001      	str	r0, [sp, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f4e:	bfb8      	it	lt
 8006f50:	18e4      	addlt	r4, r4, r3
 8006f52:	f000 f8ad 	bl	80070b0 <__malloc_lock>
 8006f56:	4a20      	ldr	r2, [pc, #128]	; (8006fd8 <_free_r+0x9c>)
 8006f58:	9801      	ldr	r0, [sp, #4]
 8006f5a:	6813      	ldr	r3, [r2, #0]
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	b933      	cbnz	r3, 8006f6e <_free_r+0x32>
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	6014      	str	r4, [r2, #0]
 8006f64:	b003      	add	sp, #12
 8006f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f6a:	f000 b8a7 	b.w	80070bc <__malloc_unlock>
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	d90b      	bls.n	8006f8a <_free_r+0x4e>
 8006f72:	6821      	ldr	r1, [r4, #0]
 8006f74:	1862      	adds	r2, r4, r1
 8006f76:	4293      	cmp	r3, r2
 8006f78:	bf04      	itt	eq
 8006f7a:	681a      	ldreq	r2, [r3, #0]
 8006f7c:	685b      	ldreq	r3, [r3, #4]
 8006f7e:	6063      	str	r3, [r4, #4]
 8006f80:	bf04      	itt	eq
 8006f82:	1852      	addeq	r2, r2, r1
 8006f84:	6022      	streq	r2, [r4, #0]
 8006f86:	602c      	str	r4, [r5, #0]
 8006f88:	e7ec      	b.n	8006f64 <_free_r+0x28>
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	b10b      	cbz	r3, 8006f94 <_free_r+0x58>
 8006f90:	42a3      	cmp	r3, r4
 8006f92:	d9fa      	bls.n	8006f8a <_free_r+0x4e>
 8006f94:	6811      	ldr	r1, [r2, #0]
 8006f96:	1855      	adds	r5, r2, r1
 8006f98:	42a5      	cmp	r5, r4
 8006f9a:	d10b      	bne.n	8006fb4 <_free_r+0x78>
 8006f9c:	6824      	ldr	r4, [r4, #0]
 8006f9e:	4421      	add	r1, r4
 8006fa0:	1854      	adds	r4, r2, r1
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	d1dd      	bne.n	8006f64 <_free_r+0x28>
 8006fa8:	681c      	ldr	r4, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	6053      	str	r3, [r2, #4]
 8006fae:	4421      	add	r1, r4
 8006fb0:	6011      	str	r1, [r2, #0]
 8006fb2:	e7d7      	b.n	8006f64 <_free_r+0x28>
 8006fb4:	d902      	bls.n	8006fbc <_free_r+0x80>
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	e7d3      	b.n	8006f64 <_free_r+0x28>
 8006fbc:	6825      	ldr	r5, [r4, #0]
 8006fbe:	1961      	adds	r1, r4, r5
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	bf04      	itt	eq
 8006fc4:	6819      	ldreq	r1, [r3, #0]
 8006fc6:	685b      	ldreq	r3, [r3, #4]
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	bf04      	itt	eq
 8006fcc:	1949      	addeq	r1, r1, r5
 8006fce:	6021      	streq	r1, [r4, #0]
 8006fd0:	6054      	str	r4, [r2, #4]
 8006fd2:	e7c7      	b.n	8006f64 <_free_r+0x28>
 8006fd4:	b003      	add	sp, #12
 8006fd6:	bd30      	pop	{r4, r5, pc}
 8006fd8:	200000b4 	.word	0x200000b4

08006fdc <_malloc_r>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	1ccd      	adds	r5, r1, #3
 8006fe0:	f025 0503 	bic.w	r5, r5, #3
 8006fe4:	3508      	adds	r5, #8
 8006fe6:	2d0c      	cmp	r5, #12
 8006fe8:	bf38      	it	cc
 8006fea:	250c      	movcc	r5, #12
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	4606      	mov	r6, r0
 8006ff0:	db01      	blt.n	8006ff6 <_malloc_r+0x1a>
 8006ff2:	42a9      	cmp	r1, r5
 8006ff4:	d903      	bls.n	8006ffe <_malloc_r+0x22>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	f000 f857 	bl	80070b0 <__malloc_lock>
 8007002:	4921      	ldr	r1, [pc, #132]	; (8007088 <_malloc_r+0xac>)
 8007004:	680a      	ldr	r2, [r1, #0]
 8007006:	4614      	mov	r4, r2
 8007008:	b99c      	cbnz	r4, 8007032 <_malloc_r+0x56>
 800700a:	4f20      	ldr	r7, [pc, #128]	; (800708c <_malloc_r+0xb0>)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	b923      	cbnz	r3, 800701a <_malloc_r+0x3e>
 8007010:	4621      	mov	r1, r4
 8007012:	4630      	mov	r0, r6
 8007014:	f000 f83c 	bl	8007090 <_sbrk_r>
 8007018:	6038      	str	r0, [r7, #0]
 800701a:	4629      	mov	r1, r5
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f837 	bl	8007090 <_sbrk_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d123      	bne.n	800706e <_malloc_r+0x92>
 8007026:	230c      	movs	r3, #12
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	4630      	mov	r0, r6
 800702c:	f000 f846 	bl	80070bc <__malloc_unlock>
 8007030:	e7e3      	b.n	8006ffa <_malloc_r+0x1e>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	1b5b      	subs	r3, r3, r5
 8007036:	d417      	bmi.n	8007068 <_malloc_r+0x8c>
 8007038:	2b0b      	cmp	r3, #11
 800703a:	d903      	bls.n	8007044 <_malloc_r+0x68>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	441c      	add	r4, r3
 8007040:	6025      	str	r5, [r4, #0]
 8007042:	e004      	b.n	800704e <_malloc_r+0x72>
 8007044:	6863      	ldr	r3, [r4, #4]
 8007046:	42a2      	cmp	r2, r4
 8007048:	bf0c      	ite	eq
 800704a:	600b      	streq	r3, [r1, #0]
 800704c:	6053      	strne	r3, [r2, #4]
 800704e:	4630      	mov	r0, r6
 8007050:	f000 f834 	bl	80070bc <__malloc_unlock>
 8007054:	f104 000b 	add.w	r0, r4, #11
 8007058:	1d23      	adds	r3, r4, #4
 800705a:	f020 0007 	bic.w	r0, r0, #7
 800705e:	1ac2      	subs	r2, r0, r3
 8007060:	d0cc      	beq.n	8006ffc <_malloc_r+0x20>
 8007062:	1a1b      	subs	r3, r3, r0
 8007064:	50a3      	str	r3, [r4, r2]
 8007066:	e7c9      	b.n	8006ffc <_malloc_r+0x20>
 8007068:	4622      	mov	r2, r4
 800706a:	6864      	ldr	r4, [r4, #4]
 800706c:	e7cc      	b.n	8007008 <_malloc_r+0x2c>
 800706e:	1cc4      	adds	r4, r0, #3
 8007070:	f024 0403 	bic.w	r4, r4, #3
 8007074:	42a0      	cmp	r0, r4
 8007076:	d0e3      	beq.n	8007040 <_malloc_r+0x64>
 8007078:	1a21      	subs	r1, r4, r0
 800707a:	4630      	mov	r0, r6
 800707c:	f000 f808 	bl	8007090 <_sbrk_r>
 8007080:	3001      	adds	r0, #1
 8007082:	d1dd      	bne.n	8007040 <_malloc_r+0x64>
 8007084:	e7cf      	b.n	8007026 <_malloc_r+0x4a>
 8007086:	bf00      	nop
 8007088:	200000b4 	.word	0x200000b4
 800708c:	200000b8 	.word	0x200000b8

08007090 <_sbrk_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d06      	ldr	r5, [pc, #24]	; (80070ac <_sbrk_r+0x1c>)
 8007094:	2300      	movs	r3, #0
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7f9 fdba 	bl	8000c14 <_sbrk>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_sbrk_r+0x1a>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_sbrk_r+0x1a>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20000848 	.word	0x20000848

080070b0 <__malloc_lock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__malloc_lock+0x8>)
 80070b2:	f000 b809 	b.w	80070c8 <__retarget_lock_acquire_recursive>
 80070b6:	bf00      	nop
 80070b8:	20000850 	.word	0x20000850

080070bc <__malloc_unlock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__malloc_unlock+0x8>)
 80070be:	f000 b804 	b.w	80070ca <__retarget_lock_release_recursive>
 80070c2:	bf00      	nop
 80070c4:	20000850 	.word	0x20000850

080070c8 <__retarget_lock_acquire_recursive>:
 80070c8:	4770      	bx	lr

080070ca <__retarget_lock_release_recursive>:
 80070ca:	4770      	bx	lr

080070cc <_init>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	bf00      	nop
 80070d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d2:	bc08      	pop	{r3}
 80070d4:	469e      	mov	lr, r3
 80070d6:	4770      	bx	lr

080070d8 <_fini>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	bf00      	nop
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr
